{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\imyua\\\\dev\\\\calendar\\\\comps\\\\timeline.js\";\nvar __jsx = React.createElement;\nimport EventCard from \"../comps/eventCard\";\nimport Grid from \"@material-ui/core/Grid\";\nimport React from \"react\";\nimport { Event } from \"../classes\";\n\nvar Timeline =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Timeline, _React$Component);\n\n  function Timeline() {\n    _classCallCheck(this, Timeline);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Timeline).apply(this, arguments));\n  }\n\n  _createClass(Timeline, [{\n    key: \"todayEvents\",\n    value: function todayEvents(events, date) {\n      console.log(this.props.events);\n      events.filter(function (event) {\n        if (event.startTime instanceof Date) {\n          return event.startTime.getFullYear() === date.getFullYear() && event.startTime.getMonth() == date.getMonth() && event.startTime.getDate() == date.getDate();\n        } else return false;\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return fillEvents(this.todayEvents(this.props.events, new Date())).map(function (event) {\n        if (!event.isEmpty) {\n          return __jsx(Grid, {\n            container: true,\n            spacing: 1,\n            key: event.startTime,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 24\n            },\n            __self: this\n          }, __jsx(Grid, {\n            item: true,\n            xs: 2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 25\n            },\n            __self: this\n          }, __jsx(\"p\", {\n            style: {\n              color: \"white\",\n              fontSize: 8\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 26\n            },\n            __self: this\n          }, event.startTime.getHours(), \":\", event.startTime.getMinutes() < 10 ? \"0\" : \"\" + event.startTime.getMinutes())), __jsx(Grid, {\n            item: true,\n            xs: 10,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 31\n            },\n            __self: this\n          }, __jsx(EventCard, {\n            key: event.startTime,\n            event: event,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 32\n            },\n            __self: this\n          })));\n        } else {\n          return __jsx(Grid, {\n            container: true,\n            spacing: 1,\n            key: event.startTime,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 38\n            },\n            __self: this\n          }, __jsx(Grid, {\n            item: true,\n            xs: 2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 39\n            },\n            __self: this\n          }), __jsx(Grid, {\n            item: true,\n            xs: 10,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 40\n            },\n            __self: this\n          }, __jsx(EventCard, {\n            key: event.startTime,\n            event: event,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 41\n            },\n            __self: this\n          })));\n        }\n      });\n    }\n  }]);\n\n  return Timeline;\n}(React.Component);\n\nfunction fillEvents(events) {\n  var time = new Date().setHours(0, 0, 0);\n  var filledEvents = [];\n  events.map(function (event) {\n    if (time < event.startTime) {\n      filledEvents.push(new Event({\n        startTime: time,\n        endTime: event.startTime\n      }, true));\n      filledEvents.push(event);\n      time = event.endTime;\n    } else {\n      filledEvents.push(event);\n      time = event.endTime;\n    }\n  });\n  filledEvents.push(new Event({\n    startTime: time,\n    endTime: new Date(\"2020/2/23 23:59:59\")\n  }, true));\n  return filledEvents;\n}\n\nexport default Timeline;","map":{"version":3,"sources":["C:/Users/imyua/dev/calendar/comps/timeline.js"],"names":["EventCard","Grid","React","Event","Timeline","events","date","console","log","props","filter","event","startTime","Date","getFullYear","getMonth","getDate","fillEvents","todayEvents","map","isEmpty","color","fontSize","getHours","getMinutes","Component","time","setHours","filledEvents","push","endTime"],"mappings":"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","sourcesContent":["import EventCard from \"../comps/eventCard\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport React from \"react\";\r\nimport { Event } from \"../classes\";\r\n\r\nclass Timeline extends React.Component {\r\n    todayEvents(events, date) {\r\n        console.log(this.props.events);\r\n        events.filter(event => {\r\n            if (event.startTime instanceof Date) {\r\n                return (\r\n                    event.startTime.getFullYear() === date.getFullYear() &&\r\n                    event.startTime.getMonth() == date.getMonth() &&\r\n                    event.startTime.getDate() == date.getDate()\r\n                );\r\n            } else return false;\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return fillEvents(this.todayEvents(this.props.events, new Date())).map(event => {\r\n            if (!event.isEmpty) {\r\n                return (\r\n                    <Grid container spacing={1} key={event.startTime}>\r\n                        <Grid item xs={2}>\r\n                            <p style={{ color: \"white\", fontSize: 8 }}>\r\n                                {event.startTime.getHours()}:\r\n                                {event.startTime.getMinutes() < 10 ? \"0\" : \"\" + event.startTime.getMinutes()}\r\n                            </p>\r\n                        </Grid>\r\n                        <Grid item xs={10}>\r\n                            <EventCard key={event.startTime} event={event} />\r\n                        </Grid>\r\n                    </Grid>\r\n                );\r\n            } else {\r\n                return (\r\n                    <Grid container spacing={1} key={event.startTime}>\r\n                        <Grid item xs={2}></Grid>\r\n                        <Grid item xs={10}>\r\n                            <EventCard key={event.startTime} event={event} />\r\n                        </Grid>\r\n                    </Grid>\r\n                );\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction fillEvents(events) {\r\n    var time = new Date().setHours(0, 0, 0);\r\n    var filledEvents = [];\r\n    events.map(event => {\r\n        if (time < event.startTime) {\r\n            filledEvents.push(new Event({ startTime: time, endTime: event.startTime }, true));\r\n            filledEvents.push(event);\r\n            time = event.endTime;\r\n        } else {\r\n            filledEvents.push(event);\r\n            time = event.endTime;\r\n        }\r\n    });\r\n    filledEvents.push(new Event({ startTime: time, endTime: new Date(\"2020/2/23 23:59:59\") }, true));\r\n    return filledEvents;\r\n}\r\n\r\nexport default Timeline;\r\n"]},"metadata":{},"sourceType":"module"}