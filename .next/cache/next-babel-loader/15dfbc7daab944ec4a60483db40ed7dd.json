{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\imyua\\\\dev\\\\calendar\\\\comps\\\\timeline.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport EventCard from \"../comps/eventCard\";\nimport Grid from \"@material-ui/core/Grid\";\n\nfunction fillByOneHour(filledEvents, startTime, time) {\n  var n = parseInt((startTime - time) / 3600000);\n  var count = 1;\n\n  for (; n >= 0; count++, n--) {\n    if (n > 0) {\n      var h = time.getHours() + count - 1;\n      filledEvents.push({\n        startTime: time.setHours(h),\n        endTime: time.setHours(h + 1),\n        cal: null\n      });\n    } else if (n == 0) {\n      filledEvents.push({\n        startTime: time.setHours(time.getHours() + count - 1),\n        endTime: event.startTime,\n        cal: null\n      });\n    }\n  }\n}\n\nfunction Timeline(props) {\n  function fillEvents(events) {\n    var time = new Date(\"2020/2/20 0:00:00\");\n    var filledEvents = [];\n    events.map(event => {\n      if (time < event.startTime) {\n        fillByOneHour(filledEvents, event.startTime, time).then(() => {\n          filledEvents.push(event);\n          time = event.endTime;\n        });\n      } else {\n        filledEvents.push(event);\n        time = event.endTime;\n      }\n    });\n    return filledEvents;\n  }\n\n  return fillEvents(props.events).map(event => {\n    if (event.cal !== null) {\n      return __jsx(Grid, {\n        container: true,\n        spacing: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, __jsx(Grid, {\n        item: true,\n        xs: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, __jsx(\"p\", {\n        style: {\n          color: \"white\",\n          fontSize: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, event.startTime.getHours(), \" :\", \" \", (event.startTime.getMinutes() < 10 ? \"0\" : \"\") + event.startTime.getMinutes())), __jsx(Grid, {\n        item: true,\n        xs: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, __jsx(EventCard, {\n        event: event,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      })));\n    } else return __jsx(Grid, {\n      container: true,\n      spacing: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, __jsx(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), __jsx(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, __jsx(EventCard, {\n      event: event,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    })));\n  });\n}\n\nexport default Timeline;","map":{"version":3,"sources":["C:/Users/imyua/dev/calendar/comps/timeline.js"],"names":["EventCard","Grid","fillByOneHour","filledEvents","startTime","time","n","parseInt","count","h","getHours","push","setHours","endTime","cal","event","Timeline","props","fillEvents","events","Date","map","then","color","fontSize","getMinutes"],"mappings":"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","sourcesContent":["import EventCard from \"../comps/eventCard\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nfunction fillByOneHour(filledEvents, startTime, time) {\r\n    var n = parseInt((startTime - time) / 3600000);\r\n    var count = 1;\r\n    for (; n >= 0; count++, n--) {\r\n        if (n > 0) {\r\n            var h = time.getHours() + count - 1;\r\n            filledEvents.push({\r\n                startTime: time.setHours(h),\r\n                endTime: time.setHours(h + 1),\r\n                cal: null\r\n            });\r\n        } else if (n == 0) {\r\n            filledEvents.push({\r\n                startTime: time.setHours(time.getHours() + count - 1),\r\n                endTime: event.startTime,\r\n                cal: null\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nfunction Timeline(props) {\r\n    function fillEvents(events) {\r\n        var time = new Date(\"2020/2/20 0:00:00\");\r\n        var filledEvents = [];\r\n        events.map(event => {\r\n            if (time < event.startTime) {\r\n                fillByOneHour(filledEvents, event.startTime, time).then(() => {\r\n                    filledEvents.push(event);\r\n                    time = event.endTime;\r\n                });\r\n            } else {\r\n                filledEvents.push(event);\r\n                time = event.endTime;\r\n            }\r\n        });\r\n        return filledEvents;\r\n    }\r\n\r\n    return fillEvents(props.events).map(event => {\r\n        if (event.cal !== null) {\r\n            return (\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={2}>\r\n                        <p style={{ color: \"white\", fontSize: 8 }}>\r\n                            {event.startTime.getHours()} :{\" \"}\r\n                            {(event.startTime.getMinutes() < 10 ? \"0\" : \"\") + event.startTime.getMinutes()}\r\n                        </p>\r\n                    </Grid>\r\n                    <Grid item xs={10}>\r\n                        <EventCard event={event} />\r\n                    </Grid>\r\n                </Grid>\r\n            );\r\n        } else\r\n            return (\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={2}></Grid>\r\n                    <Grid item xs={10}>\r\n                        <EventCard event={event} />\r\n                    </Grid>\r\n                </Grid>\r\n            );\r\n    });\r\n}\r\n\r\nexport default Timeline;\r\n"]},"metadata":{},"sourceType":"module"}