{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\imyua\\\\dev\\\\calendar\\\\comps\\\\timeline.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport EventCard from \"../comps/eventCard\";\nimport Grid from \"@material-ui/core/Grid\";\n\nasync function addNewEvent(eventList, eventData) {\n  return new Promise(resolve => {\n    eventList.push({\n      startTime: eventData.start,\n      endTime: eventData.end,\n      cal: eventData.calendar\n    });\n    resolve(eventData.end);\n  });\n}\n\nasync function fillPerOneHour(filledEvents, from, to) {\n  console.log(\"await fillPerOneHour(filledEvents, \" + from.getHours() + \", \" + to.getHours() + \");\");\n  return new Promise(async resolve => {\n    while (to.getHours() > from.getHours()) {\n      console.log(from.getHours() + \" \" + to.getHours());\n      var temp = new Date(from).setHours(from.getHours() + 1, 0);\n      from = await addNewEvent(filledEvents, {\n        start: from,\n        end: temp,\n        calendar: null\n      });\n    }\n  });\n}\n\nfunction Timeline(props) {\n  function fillEvents(events) {\n    var time = new Date(\"2020/2/20 0:00:00\");\n    var filledEvents = [];\n    events.map(async event => {\n      if (time < event.startTime) {\n        await fillPerOneHour(filledEvents, time, event.startTime);\n        filledEvents.push(event);\n        time = event.endTime;\n      } else {\n        filledEvents.push(event);\n        time = event.endTime;\n      }\n    });\n    filledEvents.push({\n      startTime: time,\n      endTime: new Date(\"2020/2/20 24:00:00\"),\n      cal: null\n    });\n    return filledEvents;\n  }\n\n  return fillEvents(props.events).map(event => {\n    if (event.cal !== null) {\n      return __jsx(Grid, {\n        container: true,\n        spacing: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, __jsx(Grid, {\n        item: true,\n        xs: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, __jsx(\"p\", {\n        style: {\n          color: \"white\",\n          fontSize: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, event.startTime.getHours(), \":\", (event.startTime.getMinutes() < 10 ? \"0\" : \"\") + event.startTime.getMinutes())), __jsx(Grid, {\n        item: true,\n        xs: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, __jsx(EventCard, {\n        event: event,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      })));\n    } else return __jsx(Grid, {\n      container: true,\n      spacing: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, __jsx(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), __jsx(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, __jsx(EventCard, {\n      event: event,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    })));\n  });\n}\n\nexport default Timeline;","map":{"version":3,"sources":["C:/Users/imyua/dev/calendar/comps/timeline.js"],"names":["EventCard","Grid","addNewEvent","eventList","eventData","Promise","resolve","push","startTime","start","endTime","end","cal","calendar","fillPerOneHour","filledEvents","from","to","console","log","getHours","temp","Date","setHours","Timeline","props","fillEvents","events","time","map","event","color","fontSize","getMinutes"],"mappings":"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","sourcesContent":["import EventCard from \"../comps/eventCard\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nasync function addNewEvent(eventList, eventData) {\r\n    return new Promise(resolve => {\r\n        eventList.push({\r\n            startTime: eventData.start,\r\n            endTime: eventData.end,\r\n            cal: eventData.calendar\r\n        });\r\n        resolve(eventData.end);\r\n    });\r\n}\r\n\r\nasync function fillPerOneHour(filledEvents, from, to) {\r\n    console.log(\"await fillPerOneHour(filledEvents, \" + from.getHours() + \", \" + to.getHours() + \");\");\r\n    return new Promise(async resolve => {\r\n        while (to.getHours() > from.getHours()) {\r\n            console.log(from.getHours() + \" \" + to.getHours());\r\n            var temp = new Date(from).setHours(from.getHours() + 1, 0);\r\n            from = await addNewEvent(filledEvents, {\r\n                start: from,\r\n                end: temp,\r\n                calendar: null\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nfunction Timeline(props) {\r\n    function fillEvents(events) {\r\n        var time = new Date(\"2020/2/20 0:00:00\");\r\n        var filledEvents = [];\r\n        events.map(async event => {\r\n            if (time < event.startTime) {\r\n                await fillPerOneHour(filledEvents, time, event.startTime);\r\n                filledEvents.push(event);\r\n                time = event.endTime;\r\n            } else {\r\n                filledEvents.push(event);\r\n                time = event.endTime;\r\n            }\r\n        });\r\n        filledEvents.push({\r\n            startTime: time,\r\n            endTime: new Date(\"2020/2/20 24:00:00\"),\r\n            cal: null\r\n        });\r\n        return filledEvents;\r\n    }\r\n\r\n    return fillEvents(props.events).map(event => {\r\n        if (event.cal !== null) {\r\n            return (\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={2}>\r\n                        <p style={{ color: \"white\", fontSize: 8 }}>\r\n                            {event.startTime.getHours()}:\r\n                            {(event.startTime.getMinutes() < 10 ? \"0\" : \"\") + event.startTime.getMinutes()}\r\n                        </p>\r\n                    </Grid>\r\n                    <Grid item xs={10}>\r\n                        <EventCard event={event} />\r\n                    </Grid>\r\n                </Grid>\r\n            );\r\n        } else\r\n            return (\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={2}></Grid>\r\n                    <Grid item xs={10}>\r\n                        <EventCard event={event} />\r\n                    </Grid>\r\n                </Grid>\r\n            );\r\n    });\r\n}\r\n\r\nexport default Timeline;\r\n"]},"metadata":{},"sourceType":"module"}