{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\imyua\\\\dev\\\\calendar\\\\comps\\\\timeline.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport EventCard from \"../comps/eventCard\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { Event } from \"../classes\";\n\nfunction fillEvents(events) {\n  var time = new Date().setHours(0, 0, 0);\n  var filledEvents = [];\n  events.map(event => {\n    if (time < event.startTime) {\n      filledEvents.push(new Event({\n        startTime: time,\n        endTime: event.startTime\n      }, true));\n      filledEvents.push(event);\n      time = event.endTime;\n    } else {\n      filledEvents.push(event);\n      time = event.endTime;\n    }\n  });\n  filledEvents.push(new Event({\n    startTime: time,\n    endTime: new Date(\"2020/2/23 23:59:59\")\n  }, true));\n  return filledEvents;\n}\n\nclass Timeline extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    _defineProperty(this, \"todayEvents\", props.events.filter(event => {\n      if (event.startTime instanceof Date) {\n        return event.startTime.getFullYear() === 2020 && event.startTime.getMonth() + 1 == 2 && event.startTime.getDate() == 23;\n      } else return false;\n    }));\n  }\n\n  render() {\n    return fillEvents(todayEvents).map(event => {\n      if (!event.isEmpty) {\n        return __jsx(Grid, {\n          container: true,\n          spacing: 1,\n          key: event.startTime,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        }, __jsx(Grid, {\n          item: true,\n          xs: 2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }, __jsx(\"p\", {\n          style: {\n            color: \"white\",\n            fontSize: 8\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }, event.startTime.getHours(), \":\", event.startTime.getMinutes() < 10 ? \"0\" : \"\" + event.startTime.getMinutes())), __jsx(Grid, {\n          item: true,\n          xs: 10,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }, __jsx(EventCard, {\n          key: event.startTime,\n          event: event,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        })));\n      } else {\n        return __jsx(Grid, {\n          container: true,\n          spacing: 1,\n          key: event.startTime,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }, __jsx(Grid, {\n          item: true,\n          xs: 2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        }), __jsx(Grid, {\n          item: true,\n          xs: 10,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        }, __jsx(EventCard, {\n          key: event.startTime,\n          event: event,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        })));\n      }\n    });\n  }\n\n}\n\nexport default Timeline;","map":{"version":3,"sources":["C:/Users/imyua/dev/calendar/comps/timeline.js"],"names":["EventCard","Grid","Event","fillEvents","events","time","Date","setHours","filledEvents","map","event","startTime","push","endTime","Timeline","React","Component","constructor","props","filter","getFullYear","getMonth","getDate","render","todayEvents","isEmpty","color","fontSize","getHours","getMinutes"],"mappings":"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","sourcesContent":["import EventCard from \"../comps/eventCard\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { Event } from \"../classes\";\r\n\r\nfunction fillEvents(events) {\r\n    var time = new Date().setHours(0, 0, 0);\r\n    var filledEvents = [];\r\n    events.map(event => {\r\n        if (time < event.startTime) {\r\n            filledEvents.push(new Event({ startTime: time, endTime: event.startTime }, true));\r\n            filledEvents.push(event);\r\n            time = event.endTime;\r\n        } else {\r\n            filledEvents.push(event);\r\n            time = event.endTime;\r\n        }\r\n    });\r\n    filledEvents.push(new Event({ startTime: time, endTime: new Date(\"2020/2/23 23:59:59\") }, true));\r\n    return filledEvents;\r\n}\r\n\r\nclass Timeline extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    todayEvents = props.events.filter(event => {\r\n        if (event.startTime instanceof Date) {\r\n            return (\r\n                event.startTime.getFullYear() === 2020 &&\r\n                event.startTime.getMonth() + 1 == 2 &&\r\n                event.startTime.getDate() == 23\r\n            );\r\n        } else return false;\r\n    });\r\n\r\n    render() {\r\n        return fillEvents(todayEvents).map(event => {\r\n            if (!event.isEmpty) {\r\n                return (\r\n                    <Grid container spacing={1} key={event.startTime}>\r\n                        <Grid item xs={2}>\r\n                            <p style={{ color: \"white\", fontSize: 8 }}>\r\n                                {event.startTime.getHours()}:\r\n                                {event.startTime.getMinutes() < 10 ? \"0\" : \"\" + event.startTime.getMinutes()}\r\n                            </p>\r\n                        </Grid>\r\n                        <Grid item xs={10}>\r\n                            <EventCard key={event.startTime} event={event} />\r\n                        </Grid>\r\n                    </Grid>\r\n                );\r\n            } else {\r\n                return (\r\n                    <Grid container spacing={1} key={event.startTime}>\r\n                        <Grid item xs={2}></Grid>\r\n                        <Grid item xs={10}>\r\n                            <EventCard key={event.startTime} event={event} />\r\n                        </Grid>\r\n                    </Grid>\r\n                );\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default Timeline;\r\n"]},"metadata":{},"sourceType":"module"}