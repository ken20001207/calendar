{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { Event } from \"../classes\";\n\nclass EventCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      elevation: 0\n    };\n    this.handleMouseOver = this.handleMouseOver.bind(this);\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleEmptyCardClick = this.handleEmptyCardClick.bind(this);\n  }\n\n  handleMouseOver() {\n    this.setState({\n      elevation: 20\n    });\n  }\n\n  handleMouseLeave() {\n    this.setState({\n      elevation: 0\n    });\n  }\n\n  handleClick() {\n    this.props.openEventEditDialog(this.props.event);\n  }\n\n  handleEmptyCardClick() {\n    this.props.openEventCreateDialog(this.props.event);\n  }\n\n  emptyCard(startTime, endTime) {\n    endTime = endTime;\n    startTime = startTime;\n    const duration = (endTime - startTime) / 60000;\n    var cardStyle = {\n      height: duration,\n      backgroundColor: \"transparent\",\n      borderBottomStyle: endTime.getMinutes() == 0 ? \"solid\" : \"none\",\n      borderBottomColor: \"#444444\",\n      borderBottomWidth: 1,\n      borderTopStyle: startTime.getMinutes() == 0 ? \"solid\" : \"none\",\n      borderTopColor: \"#444444\",\n      borderTopWidth: 1\n    };\n    return __jsx(\"div\", {\n      style: cardStyle,\n      key: startTime.getTime(),\n      onClick: this.handleEmptyCardClick\n    });\n  }\n\n  EmptySections(start, end) {\n    if (end.getHours() < start.getHours()) {\n      end.setHours(23, 59, 59);\n    }\n\n    var arr = new Array(end.getHours() - start.getHours() + 1);\n\n    if (start.getHours() == end.getHours()) {\n      arr[0] = this.emptyCard(start, end);\n    } else if (start.getHours() + 1 == end.getHours()) {\n      var a = new Date(end);\n      a.setMinutes(0);\n      arr[0] = this.emptyCard(start, a);\n      arr[1] = this.emptyCard(a, end);\n    } else {\n      var a = new Date(start);\n      a.setHours(start.getHours() + 1, 0);\n      arr[0] = this.emptyCard(start, a);\n\n      for (var i = start.getHours() + 1, j = 1; i < end.getHours(); i++, j++) {\n        var a = new Date(start);\n        a.setHours(i, 0);\n        var b = new Date(start);\n        b.setHours(i + 1, 0);\n        arr[j] = this.emptyCard(a, b);\n      }\n\n      var a = new Date(end);\n      a.setMinutes(0);\n      arr[end.getHours() - start.getHours()] = this.emptyCard(a, end);\n    }\n\n    return arr;\n  }\n\n  render() {\n    if (this.props.event instanceof Event) {\n      if (this.props.event.isEmpty) {\n        return this.EmptySections(this.props.event.startTime, this.props.event.endTime).map(emptyCard => {\n          return emptyCard;\n        });\n      } else {\n        const style = {\n          height: this.props.height != undefined ? this.props.height : this.props.event.duration,\n          backgroundImage: \"linear-gradient(315deg, \" + this.props.event.color[0] + \" 0%, \" + this.props.event.color[1] + \" 100%)\",\n          fontSize: 8,\n          paddingLeft: 16,\n          marginTop: this.props.height != undefined ? 15 : 0,\n          paddingTop: 6,\n          paddingBottom: 6\n        };\n        /** compose event info of card */\n\n        var lineAmount = this.props.height != undefined ? parseInt(this.props.height / 20) > 1 ? parseInt(this.props.height / 20) - 1 : 1 : parseInt(this.props.event.duration / 20) > 1 ? parseInt(this.props.event.duration / 20) - 1 : 1;\n        var eventInfo = [];\n        eventInfo.push(this.props.event.isAllDayEvent() ? __jsx(\"p\", {\n          key: \"title\",\n          style: {\n            color: \"white\"\n          }\n        }, this.props.event.title, \" \") : __jsx(\"p\", {\n          key: \"title\",\n          style: {\n            color: \"white\"\n          }\n        }, this.props.event.title, \" \", __jsx(\"strong\", {\n          style: {\n            marginLeft: 16,\n            color: \"rgba(255,255,255,0.4)\"\n          }\n        }, this.props.event.getDurationString())));\n        if (!this.props.event.isAllDayEvent()) eventInfo.push(__jsx(\"p\", {\n          style: {\n            color: \"rgba(255,255,255,0.8)\"\n          },\n          key: \"duration\"\n        }, this.props.event.duration, \" \\u5206\\u9418\"));else {\n          eventInfo.push(__jsx(\"p\", {\n            style: {\n              color: \"rgba(255,255,255,0.8)\"\n            },\n            key: \"duration\"\n          }, \"\\u5168\\u5929\\u4E8B\\u4EF6\"));\n        }\n        eventInfo.push(__jsx(\"p\", {\n          style: {\n            color: \"rgba(255,255,255,0.8)\"\n          },\n          key: \"cal\"\n        }, this.props.event.calendarTitle));\n        return __jsx(Paper, {\n          style: style,\n          elevation: this.state.elevation,\n          onMouseEnter: this.handleMouseOver,\n          onMouseLeave: this.handleMouseLeave,\n          onClick: this.handleClick,\n          key: this.props.event.id\n        }, eventInfo.slice(0, lineAmount).map(info => {\n          return info;\n        }));\n      }\n    } else {\n      console.error(\"渲染事件卡片時接收到了不符合規範的 Event 物件。\");\n      return null;\n    }\n  }\n\n}\n\nexport default EventCard;","map":null,"metadata":{},"sourceType":"module"}