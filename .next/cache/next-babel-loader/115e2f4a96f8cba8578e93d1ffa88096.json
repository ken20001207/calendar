{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nvar _jsxFileName = \"C:\\\\Users\\\\imyua\\\\dev\\\\calendar\\\\comps\\\\timeline.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport EventCard from \"../comps/eventCard\";\nimport Grid from \"@material-ui/core/Grid\";\n\nfunction addNewEvent(eventList, eventData) {\n  return _regeneratorRuntime.async(function addNewEvent$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", new _Promise(function (resolve) {\n            resolve(eventList.push({\n              startTime: eventData.start,\n              endTime: eventData.end,\n              cal: eventData.calendar\n            }));\n          }));\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n}\n\nfunction fillPerOneHour(filledEvents, from, to) {\n  return _regeneratorRuntime.async(function fillPerOneHour$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          console.log(\"await fillPerOneHour(filledEvents, \" + time.getHours() + \", \" + event.startTime.getHours() + \");\");\n          return _context3.abrupt(\"return\", new _Promise(function _callee(resolve) {\n            var temp;\n            return _regeneratorRuntime.async(function _callee$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    if (!(to.getHours() > from.getHours())) {\n                      _context2.next = 7;\n                      break;\n                    }\n\n                    console.log(from.getHours() + \" \" + to.getHours());\n                    temp = new Date(from).setHours(from.getHours() + 1, 0);\n                    _context2.next = 5;\n                    return _regeneratorRuntime.awrap(addNewEvent(filledEvents, {\n                      start: from,\n                      end: temp,\n                      calendar: null\n                    }).then(function () {\n                      console.log(\"plus\");\n                      resolve(from.setHours(from.getHours() + 1, 0));\n                    }));\n\n                  case 5:\n                    _context2.next = 0;\n                    break;\n\n                  case 7:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            });\n          }));\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  });\n}\n\nfunction Timeline(props) {\n  function fillEvents(events) {\n    var time = new Date(\"2020/2/20 0:00:00\");\n    var filledEvents = [];\n    events.map(function _callee2(event) {\n      return _regeneratorRuntime.async(function _callee2$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!(time < event.startTime)) {\n                _context4.next = 7;\n                break;\n              }\n\n              _context4.next = 3;\n              return _regeneratorRuntime.awrap(fillPerOneHour(filledEvents, time, event.startTime));\n\n            case 3:\n              filledEvents.push(event);\n              time = event.endTime;\n              _context4.next = 9;\n              break;\n\n            case 7:\n              filledEvents.push(event);\n              time = event.endTime;\n\n            case 9:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      });\n    });\n    filledEvents.push({\n      startTime: time,\n      endTime: new Date(\"2020/2/20 24:00:00\"),\n      cal: null\n    });\n    return filledEvents;\n  }\n\n  return fillEvents(props.events).map(function (event) {\n    if (event.cal !== null) {\n      return __jsx(Grid, {\n        container: true,\n        spacing: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, __jsx(Grid, {\n        item: true,\n        xs: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, __jsx(\"p\", {\n        style: {\n          color: \"white\",\n          fontSize: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, event.startTime.getHours(), \":\", (event.startTime.getMinutes() < 10 ? \"0\" : \"\") + event.startTime.getMinutes())), __jsx(Grid, {\n        item: true,\n        xs: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, __jsx(EventCard, {\n        event: event,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      })));\n    } else return __jsx(Grid, {\n      container: true,\n      spacing: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, __jsx(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), __jsx(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, __jsx(EventCard, {\n      event: event,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    })));\n  });\n}\n\nexport default Timeline;","map":{"version":3,"sources":["C:/Users/imyua/dev/calendar/comps/timeline.js"],"names":["EventCard","Grid","addNewEvent","eventList","eventData","resolve","push","startTime","start","endTime","end","cal","calendar","fillPerOneHour","filledEvents","from","to","console","log","time","getHours","event","temp","Date","setHours","then","Timeline","props","fillEvents","events","map","color","fontSize","getMinutes"],"mappings":";;;;;AAAA,OAAOA,SAAP,MAAsB,oBAAtB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;;AAEA,SAAeC,WAAf,CAA2BC,SAA3B,EAAsCC,SAAtC;AAAA;AAAA;AAAA;AAAA;AAAA,2CACW,aAAY,UAAAC,OAAO,EAAI;AAC1BA,YAAAA,OAAO,CACHF,SAAS,CAACG,IAAV,CAAe;AACXC,cAAAA,SAAS,EAAEH,SAAS,CAACI,KADV;AAEXC,cAAAA,OAAO,EAAEL,SAAS,CAACM,GAFR;AAGXC,cAAAA,GAAG,EAAEP,SAAS,CAACQ;AAHJ,aAAf,CADG,CAAP;AAOH,WARM,CADX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYA,SAAeC,cAAf,CAA8BC,YAA9B,EAA4CC,IAA5C,EAAkDC,EAAlD;AAAA;AAAA;AAAA;AAAA;AACIC,UAAAA,OAAO,CAACC,GAAR,CAAY,wCAAwCC,IAAI,CAACC,QAAL,EAAxC,GAA0D,IAA1D,GAAiEC,KAAK,CAACd,SAAN,CAAgBa,QAAhB,EAAjE,GAA8F,IAA1G;AADJ,4CAEW,aAAY,iBAAMf,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACRW,EAAE,CAACI,QAAH,KAAgBL,IAAI,CAACK,QAAL,EADR;AAAA;AAAA;AAAA;;AAEXH,oBAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACK,QAAL,KAAkB,GAAlB,GAAwBJ,EAAE,CAACI,QAAH,EAApC;AACIE,oBAAAA,IAHO,GAGA,IAAIC,IAAJ,CAASR,IAAT,EAAeS,QAAf,CAAwBT,IAAI,CAACK,QAAL,KAAkB,CAA1C,EAA6C,CAA7C,CAHA;AAAA;AAAA,qDAILlB,WAAW,CAACY,YAAD,EAAe;AAC5BN,sBAAAA,KAAK,EAAEO,IADqB;AAE5BL,sBAAAA,GAAG,EAAEY,IAFuB;AAG5BV,sBAAAA,QAAQ,EAAE;AAHkB,qBAAf,CAAX,CAIHa,IAJG,CAIE,YAAM;AACVR,sBAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAb,sBAAAA,OAAO,CAACU,IAAI,CAACS,QAAL,CAAcT,IAAI,CAACK,QAAL,KAAkB,CAAhC,EAAmC,CAAnC,CAAD,CAAP;AACH,qBAPK,CAJK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAZ,CAFX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBA,SAASM,QAAT,CAAkBC,KAAlB,EAAyB;AACrB,WAASC,UAAT,CAAoBC,MAApB,EAA4B;AACxB,QAAIV,IAAI,GAAG,IAAII,IAAJ,CAAS,mBAAT,CAAX;AACA,QAAIT,YAAY,GAAG,EAAnB;AACAe,IAAAA,MAAM,CAACC,GAAP,CAAW,kBAAMT,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA,oBACHF,IAAI,GAAGE,KAAK,CAACd,SADV;AAAA;AAAA;AAAA;;AAAA;AAAA,+CAEGM,cAAc,CAACC,YAAD,EAAeK,IAAf,EAAqBE,KAAK,CAACd,SAA3B,CAFjB;;AAAA;AAGHO,cAAAA,YAAY,CAACR,IAAb,CAAkBe,KAAlB;AACAF,cAAAA,IAAI,GAAGE,KAAK,CAACZ,OAAb;AAJG;AAAA;;AAAA;AAMHK,cAAAA,YAAY,CAACR,IAAb,CAAkBe,KAAlB;AACAF,cAAAA,IAAI,GAAGE,KAAK,CAACZ,OAAb;;AAPG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAX;AAUAK,IAAAA,YAAY,CAACR,IAAb,CAAkB;AACdC,MAAAA,SAAS,EAAEY,IADG;AAEdV,MAAAA,OAAO,EAAE,IAAIc,IAAJ,CAAS,oBAAT,CAFK;AAGdZ,MAAAA,GAAG,EAAE;AAHS,KAAlB;AAKA,WAAOG,YAAP;AACH;;AAED,SAAOc,UAAU,CAACD,KAAK,CAACE,MAAP,CAAV,CAAyBC,GAAzB,CAA6B,UAAAT,KAAK,EAAI;AACzC,QAAIA,KAAK,CAACV,GAAN,KAAc,IAAlB,EAAwB;AACpB,aACI,MAAC,IAAD;AAAM,QAAA,SAAS,MAAf;AAAgB,QAAA,OAAO,EAAE,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,MAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAG,QAAA,KAAK,EAAE;AAAEoB,UAAAA,KAAK,EAAE,OAAT;AAAkBC,UAAAA,QAAQ,EAAE;AAA5B,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKX,KAAK,CAACd,SAAN,CAAgBa,QAAhB,EADL,OAEK,CAACC,KAAK,CAACd,SAAN,CAAgB0B,UAAhB,KAA+B,EAA/B,GAAoC,GAApC,GAA0C,EAA3C,IAAiDZ,KAAK,CAACd,SAAN,CAAgB0B,UAAhB,EAFtD,CADJ,CADJ,EAOI,MAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,MAAC,SAAD;AAAW,QAAA,KAAK,EAAEZ,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAPJ,CADJ;AAaH,KAdD,MAeI,OACI,MAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAE,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,MAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,SAAD;AAAW,MAAA,KAAK,EAAEA,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAFJ,CADJ;AAQP,GAxBM,CAAP;AAyBH;;AAED,eAAeK,QAAf","sourcesContent":["import EventCard from \"../comps/eventCard\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nasync function addNewEvent(eventList, eventData) {\r\n    return new Promise(resolve => {\r\n        resolve(\r\n            eventList.push({\r\n                startTime: eventData.start,\r\n                endTime: eventData.end,\r\n                cal: eventData.calendar\r\n            })\r\n        );\r\n    });\r\n}\r\n\r\nasync function fillPerOneHour(filledEvents, from, to) {\r\n    console.log(\"await fillPerOneHour(filledEvents, \" + time.getHours() + \", \" + event.startTime.getHours() + \");\");\r\n    return new Promise(async resolve => {\r\n        while (to.getHours() > from.getHours()) {\r\n            console.log(from.getHours() + \" \" + to.getHours());\r\n            var temp = new Date(from).setHours(from.getHours() + 1, 0);\r\n            await addNewEvent(filledEvents, {\r\n                start: from,\r\n                end: temp,\r\n                calendar: null\r\n            }).then(() => {\r\n                console.log(\"plus\");\r\n                resolve(from.setHours(from.getHours() + 1, 0));\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nfunction Timeline(props) {\r\n    function fillEvents(events) {\r\n        var time = new Date(\"2020/2/20 0:00:00\");\r\n        var filledEvents = [];\r\n        events.map(async event => {\r\n            if (time < event.startTime) {\r\n                await fillPerOneHour(filledEvents, time, event.startTime);\r\n                filledEvents.push(event);\r\n                time = event.endTime;\r\n            } else {\r\n                filledEvents.push(event);\r\n                time = event.endTime;\r\n            }\r\n        });\r\n        filledEvents.push({\r\n            startTime: time,\r\n            endTime: new Date(\"2020/2/20 24:00:00\"),\r\n            cal: null\r\n        });\r\n        return filledEvents;\r\n    }\r\n\r\n    return fillEvents(props.events).map(event => {\r\n        if (event.cal !== null) {\r\n            return (\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={2}>\r\n                        <p style={{ color: \"white\", fontSize: 8 }}>\r\n                            {event.startTime.getHours()}:\r\n                            {(event.startTime.getMinutes() < 10 ? \"0\" : \"\") + event.startTime.getMinutes()}\r\n                        </p>\r\n                    </Grid>\r\n                    <Grid item xs={10}>\r\n                        <EventCard event={event} />\r\n                    </Grid>\r\n                </Grid>\r\n            );\r\n        } else\r\n            return (\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={2}></Grid>\r\n                    <Grid item xs={10}>\r\n                        <EventCard event={event} />\r\n                    </Grid>\r\n                </Grid>\r\n            );\r\n    });\r\n}\r\n\r\nexport default Timeline;\r\n"]},"metadata":{},"sourceType":"module"}