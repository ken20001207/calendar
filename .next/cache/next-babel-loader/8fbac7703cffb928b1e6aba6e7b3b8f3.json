{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\imyua\\\\dev\\\\calendar\\\\comps\\\\timeline.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport EventCard from \"../comps/eventCard\";\nimport GridList from \"@material-ui/core/GridList\";\nimport GridListTile from \"@material-ui/core/GridListTile\";\n\nfunction Timeline(props) {\n  const style = {\n    color: \"white\",\n    fontSize: 8,\n    lineHeight: 4\n  };\n\n  function fillEvents(events) {\n    var time = 0;\n    var filledEvents = [];\n    events.map(event => {\n      if (time < event.startTime) {\n        filledEvents.push({\n          startTime: time,\n          endTime: event.startTime\n        });\n        filledEvents.push(event);\n        time = event.endTime;\n      } else {\n        filledEvents.push(event);\n        time = event.endTime;\n      }\n    });\n    return filledEvents;\n  }\n\n  return fillEvents(props.events).map(event => __jsx(GridList, {\n    container: true,\n    spacing: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, __jsx(GridListTile, {\n    item: true,\n    xs: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    style: style,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, parseInt(event.startTime / 60), \" : \", event.startTime % 60)), __jsx(GridListTile, {\n    item: true,\n    xs: 11,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, __jsx(EventCard, {\n    event: event,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }))));\n}\n\nexport default Timeline;","map":{"version":3,"sources":["C:/Users/imyua/dev/calendar/comps/timeline.js"],"names":["EventCard","GridList","GridListTile","Timeline","props","style","color","fontSize","lineHeight","fillEvents","events","time","filledEvents","map","event","startTime","push","endTime","parseInt"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,oBAAtB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACrB,QAAMC,KAAK,GAAG;AACVC,IAAAA,KAAK,EAAE,OADG;AAEVC,IAAAA,QAAQ,EAAE,CAFA;AAGVC,IAAAA,UAAU,EAAE;AAHF,GAAd;;AAMA,WAASC,UAAT,CAAoBC,MAApB,EAA4B;AACxB,QAAIC,IAAI,GAAG,CAAX;AACA,QAAIC,YAAY,GAAG,EAAnB;AACAF,IAAAA,MAAM,CAACG,GAAP,CAAWC,KAAK,IAAI;AAChB,UAAIH,IAAI,GAAGG,KAAK,CAACC,SAAjB,EAA4B;AACxBH,QAAAA,YAAY,CAACI,IAAb,CAAkB;AACdD,UAAAA,SAAS,EAAEJ,IADG;AAEdM,UAAAA,OAAO,EAAEH,KAAK,CAACC;AAFD,SAAlB;AAIAH,QAAAA,YAAY,CAACI,IAAb,CAAkBF,KAAlB;AACAH,QAAAA,IAAI,GAAGG,KAAK,CAACG,OAAb;AACH,OAPD,MAOO;AACHL,QAAAA,YAAY,CAACI,IAAb,CAAkBF,KAAlB;AACAH,QAAAA,IAAI,GAAGG,KAAK,CAACG,OAAb;AACH;AACJ,KAZD;AAaA,WAAOL,YAAP;AACH;;AAED,SAAOH,UAAU,CAACL,KAAK,CAACM,MAAP,CAAV,CAAyBG,GAAzB,CAA6BC,KAAK,IACrC,MAAC,QAAD;AAAU,IAAA,SAAS,MAAnB;AAAoB,IAAA,OAAO,EAAE,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,YAAD;AAAc,IAAA,IAAI,MAAlB;AAAmB,IAAA,EAAE,EAAE,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAG,IAAA,KAAK,EAAET,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKa,QAAQ,CAACJ,KAAK,CAACC,SAAN,GAAkB,EAAnB,CADb,SACwCD,KAAK,CAACC,SAAN,GAAkB,EAD1D,CADJ,CADJ,EAMI,MAAC,YAAD;AAAc,IAAA,IAAI,MAAlB;AAAmB,IAAA,EAAE,EAAE,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,SAAD;AAAW,IAAA,KAAK,EAAED,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CANJ,CADG,CAAP;AAYH;;AAED,eAAeX,QAAf","sourcesContent":["import EventCard from \"../comps/eventCard\";\r\nimport GridList from \"@material-ui/core/GridList\";\r\nimport GridListTile from \"@material-ui/core/GridListTile\";\r\n\r\nfunction Timeline(props) {\r\n    const style = {\r\n        color: \"white\",\r\n        fontSize: 8,\r\n        lineHeight: 4\r\n    };\r\n\r\n    function fillEvents(events) {\r\n        var time = 0;\r\n        var filledEvents = [];\r\n        events.map(event => {\r\n            if (time < event.startTime) {\r\n                filledEvents.push({\r\n                    startTime: time,\r\n                    endTime: event.startTime\r\n                });\r\n                filledEvents.push(event);\r\n                time = event.endTime;\r\n            } else {\r\n                filledEvents.push(event);\r\n                time = event.endTime;\r\n            }\r\n        });\r\n        return filledEvents;\r\n    }\r\n\r\n    return fillEvents(props.events).map(event => (\r\n        <GridList container spacing={1}>\r\n            <GridListTile item xs={1}>\r\n                <p style={style}>\r\n                    {parseInt(event.startTime / 60)} : {event.startTime % 60}\r\n                </p>\r\n            </GridListTile>\r\n            <GridListTile item xs={11}>\r\n                <EventCard event={event} />\r\n            </GridListTile>\r\n        </GridList>\r\n    ));\r\n}\r\n\r\nexport default Timeline;\r\n"]},"metadata":{},"sourceType":"module"}