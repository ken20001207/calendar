{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\imyua\\\\dev\\\\calendar\\\\comps\\\\timeline.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport EventCard from \"../comps/eventCard\";\nimport Grid from \"@material-ui/core/Grid\";\n\nfunction Timeline(props) {\n  const style = {\n    color: \"white\",\n    fontSize: 8,\n    lineHeight: 4\n  };\n\n  function fillEvents(events) {\n    var time = Math.min(events[0].startTime, new Date(\"2020/2/20 6:00:00\"));\n    var filledEvents = [];\n    events.map(event => {\n      if (time < event.startTime) {\n        console.log((event.startTime - time) / 3600000);\n        filledEvents.push({\n          startTime: time,\n          endTime: event.startTime,\n          cal: null\n        });\n        filledEvents.push(event);\n        time = event.endTime;\n      } else {\n        filledEvents.push(event);\n        time = event.endTime;\n      }\n    });\n    return filledEvents;\n  }\n\n  return fillEvents(props.events).map(event => {\n    if (event.cal !== null) {\n      return __jsx(Grid, {\n        container: true,\n        spacing: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, __jsx(Grid, {\n        item: true,\n        xs: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, __jsx(\"p\", {\n        style: {\n          color: \"white\",\n          fontSize: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, event.startTime.getHours(), \" :\", \" \", (event.startTime.getMinutes() < 10 ? \"0\" : \"\") + event.startTime.getMinutes())), __jsx(Grid, {\n        item: true,\n        xs: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, __jsx(EventCard, {\n        event: event,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      })));\n    } else return __jsx(Grid, {\n      container: true,\n      spacing: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, __jsx(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), __jsx(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, __jsx(EventCard, {\n      event: event,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    })));\n  });\n}\n\nexport default Timeline;","map":{"version":3,"sources":["C:/Users/imyua/dev/calendar/comps/timeline.js"],"names":["EventCard","Grid","Timeline","props","style","color","fontSize","lineHeight","fillEvents","events","time","Math","min","startTime","Date","filledEvents","map","event","console","log","push","endTime","cal","getHours","getMinutes"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,oBAAtB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACrB,QAAMC,KAAK,GAAG;AACVC,IAAAA,KAAK,EAAE,OADG;AAEVC,IAAAA,QAAQ,EAAE,CAFA;AAGVC,IAAAA,UAAU,EAAE;AAHF,GAAd;;AAMA,WAASC,UAAT,CAAoBC,MAApB,EAA4B;AACxB,QAAIC,IAAI,GAAGC,IAAI,CAACC,GAAL,CAASH,MAAM,CAAC,CAAD,CAAN,CAAUI,SAAnB,EAA8B,IAAIC,IAAJ,CAAS,mBAAT,CAA9B,CAAX;AACA,QAAIC,YAAY,GAAG,EAAnB;AACAN,IAAAA,MAAM,CAACO,GAAP,CAAWC,KAAK,IAAI;AAChB,UAAIP,IAAI,GAAGO,KAAK,CAACJ,SAAjB,EAA4B;AACxBK,QAAAA,OAAO,CAACC,GAAR,CAAY,CAACF,KAAK,CAACJ,SAAN,GAAkBH,IAAnB,IAA2B,OAAvC;AACAK,QAAAA,YAAY,CAACK,IAAb,CAAkB;AACdP,UAAAA,SAAS,EAAEH,IADG;AAEdW,UAAAA,OAAO,EAAEJ,KAAK,CAACJ,SAFD;AAGdS,UAAAA,GAAG,EAAE;AAHS,SAAlB;AAKAP,QAAAA,YAAY,CAACK,IAAb,CAAkBH,KAAlB;AACAP,QAAAA,IAAI,GAAGO,KAAK,CAACI,OAAb;AACH,OATD,MASO;AACHN,QAAAA,YAAY,CAACK,IAAb,CAAkBH,KAAlB;AACAP,QAAAA,IAAI,GAAGO,KAAK,CAACI,OAAb;AACH;AACJ,KAdD;AAeA,WAAON,YAAP;AACH;;AAED,SAAOP,UAAU,CAACL,KAAK,CAACM,MAAP,CAAV,CAAyBO,GAAzB,CAA6BC,KAAK,IAAI;AACzC,QAAIA,KAAK,CAACK,GAAN,KAAc,IAAlB,EAAwB;AACpB,aACI,MAAC,IAAD;AAAM,QAAA,SAAS,MAAf;AAAgB,QAAA,OAAO,EAAE,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,MAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAG,QAAA,KAAK,EAAE;AAAEjB,UAAAA,KAAK,EAAE,OAAT;AAAkBC,UAAAA,QAAQ,EAAE;AAA5B,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKW,KAAK,CAACJ,SAAN,CAAgBU,QAAhB,EADL,QACmC,GADnC,EAEK,CAACN,KAAK,CAACJ,SAAN,CAAgBW,UAAhB,KAA+B,EAA/B,GAAoC,GAApC,GAA0C,EAA3C,IACGP,KAAK,CAACJ,SAAN,CAAgBW,UAAhB,EAHR,CADJ,CADJ,EAQI,MAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,MAAC,SAAD;AAAW,QAAA,KAAK,EAAEP,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CARJ,CADJ;AAcH,KAfD,MAgBI,OACI,MAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAE,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,MAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,SAAD;AAAW,MAAA,KAAK,EAAEA,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAFJ,CADJ;AAQP,GAzBM,CAAP;AA0BH;;AAED,eAAef,QAAf","sourcesContent":["import EventCard from \"../comps/eventCard\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nfunction Timeline(props) {\r\n    const style = {\r\n        color: \"white\",\r\n        fontSize: 8,\r\n        lineHeight: 4\r\n    };\r\n\r\n    function fillEvents(events) {\r\n        var time = Math.min(events[0].startTime, new Date(\"2020/2/20 6:00:00\"));\r\n        var filledEvents = [];\r\n        events.map(event => {\r\n            if (time < event.startTime) {\r\n                console.log((event.startTime - time) / 3600000);\r\n                filledEvents.push({\r\n                    startTime: time,\r\n                    endTime: event.startTime,\r\n                    cal: null\r\n                });\r\n                filledEvents.push(event);\r\n                time = event.endTime;\r\n            } else {\r\n                filledEvents.push(event);\r\n                time = event.endTime;\r\n            }\r\n        });\r\n        return filledEvents;\r\n    }\r\n\r\n    return fillEvents(props.events).map(event => {\r\n        if (event.cal !== null) {\r\n            return (\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={2}>\r\n                        <p style={{ color: \"white\", fontSize: 8 }}>\r\n                            {event.startTime.getHours()} :{\" \"}\r\n                            {(event.startTime.getMinutes() < 10 ? \"0\" : \"\") +\r\n                                event.startTime.getMinutes()}\r\n                        </p>\r\n                    </Grid>\r\n                    <Grid item xs={10}>\r\n                        <EventCard event={event} />\r\n                    </Grid>\r\n                </Grid>\r\n            );\r\n        } else\r\n            return (\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={2}></Grid>\r\n                    <Grid item xs={10}>\r\n                        <EventCard event={event} />\r\n                    </Grid>\r\n                </Grid>\r\n            );\r\n    });\r\n}\r\n\r\nexport default Timeline;\r\n"]},"metadata":{},"sourceType":"module"}