{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\imyua\\\\dev\\\\calendar\\\\comps\\\\timeline.js\";\nvar __jsx = React.createElement;\nimport EventCard from \"../comps/eventCard\";\nimport Grid from \"@material-ui/core/Grid\";\nimport React from \"react\";\nimport { Event } from \"../classes\";\n\nclass Timeline extends React.Component {\n  todayEvents(events, date) {\n    console.log(events);\n    events.filter(event => {\n      if (event.startTime instanceof Date) {\n        return event.startTime.getFullYear() === date.getFullYear() && event.startTime.getMonth() == date.getMonth() && event.startTime.getDate() == date.getDate();\n      } else return false;\n    });\n  }\n\n  render() {\n    return fillEvents(this.todayEvents(this.props.events, new Date())).map(event => {\n      if (!event.isEmpty) {\n        return __jsx(Grid, {\n          container: true,\n          spacing: 1,\n          key: event.startTime,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 24\n          },\n          __self: this\n        }, __jsx(Grid, {\n          item: true,\n          xs: 2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25\n          },\n          __self: this\n        }, __jsx(\"p\", {\n          style: {\n            color: \"white\",\n            fontSize: 8\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26\n          },\n          __self: this\n        }, event.startTime.getHours(), \":\", event.startTime.getMinutes() < 10 ? \"0\" : \"\" + event.startTime.getMinutes())), __jsx(Grid, {\n          item: true,\n          xs: 10,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        }, __jsx(EventCard, {\n          key: event.startTime,\n          event: event,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        })));\n      } else {\n        return __jsx(Grid, {\n          container: true,\n          spacing: 1,\n          key: event.startTime,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        }, __jsx(Grid, {\n          item: true,\n          xs: 2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          },\n          __self: this\n        }), __jsx(Grid, {\n          item: true,\n          xs: 10,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        }, __jsx(EventCard, {\n          key: event.startTime,\n          event: event,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        })));\n      }\n    });\n  }\n\n}\n\nfunction fillEvents(events) {\n  var time = new Date().setHours(0, 0, 0);\n  var filledEvents = [];\n  events.map(event => {\n    if (time < event.startTime) {\n      filledEvents.push(new Event({\n        startTime: time,\n        endTime: event.startTime\n      }, true));\n      filledEvents.push(event);\n      time = event.endTime;\n    } else {\n      filledEvents.push(event);\n      time = event.endTime;\n    }\n  });\n  filledEvents.push(new Event({\n    startTime: time,\n    endTime: new Date(\"2020/2/23 23:59:59\")\n  }, true));\n  return filledEvents;\n}\n\nexport default Timeline;","map":{"version":3,"sources":["C:/Users/imyua/dev/calendar/comps/timeline.js"],"names":["EventCard","Grid","React","Event","Timeline","Component","todayEvents","events","date","console","log","filter","event","startTime","Date","getFullYear","getMonth","getDate","render","fillEvents","props","map","isEmpty","color","fontSize","getHours","getMinutes","time","setHours","filledEvents","push","endTime"],"mappings":"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","sourcesContent":["import EventCard from \"../comps/eventCard\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport React from \"react\";\r\nimport { Event } from \"../classes\";\r\n\r\nclass Timeline extends React.Component {\r\n    todayEvents(events, date) {\r\n        console.log(events);\r\n        events.filter(event => {\r\n            if (event.startTime instanceof Date) {\r\n                return (\r\n                    event.startTime.getFullYear() === date.getFullYear() &&\r\n                    event.startTime.getMonth() == date.getMonth() &&\r\n                    event.startTime.getDate() == date.getDate()\r\n                );\r\n            } else return false;\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return fillEvents(this.todayEvents(this.props.events, new Date())).map(event => {\r\n            if (!event.isEmpty) {\r\n                return (\r\n                    <Grid container spacing={1} key={event.startTime}>\r\n                        <Grid item xs={2}>\r\n                            <p style={{ color: \"white\", fontSize: 8 }}>\r\n                                {event.startTime.getHours()}:\r\n                                {event.startTime.getMinutes() < 10 ? \"0\" : \"\" + event.startTime.getMinutes()}\r\n                            </p>\r\n                        </Grid>\r\n                        <Grid item xs={10}>\r\n                            <EventCard key={event.startTime} event={event} />\r\n                        </Grid>\r\n                    </Grid>\r\n                );\r\n            } else {\r\n                return (\r\n                    <Grid container spacing={1} key={event.startTime}>\r\n                        <Grid item xs={2}></Grid>\r\n                        <Grid item xs={10}>\r\n                            <EventCard key={event.startTime} event={event} />\r\n                        </Grid>\r\n                    </Grid>\r\n                );\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction fillEvents(events) {\r\n    var time = new Date().setHours(0, 0, 0);\r\n    var filledEvents = [];\r\n    events.map(event => {\r\n        if (time < event.startTime) {\r\n            filledEvents.push(new Event({ startTime: time, endTime: event.startTime }, true));\r\n            filledEvents.push(event);\r\n            time = event.endTime;\r\n        } else {\r\n            filledEvents.push(event);\r\n            time = event.endTime;\r\n        }\r\n    });\r\n    filledEvents.push(new Event({ startTime: time, endTime: new Date(\"2020/2/23 23:59:59\") }, true));\r\n    return filledEvents;\r\n}\r\n\r\nexport default Timeline;\r\n"]},"metadata":{},"sourceType":"module"}