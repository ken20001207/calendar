{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\imyua\\\\dev\\\\calendar\\\\comps\\\\timeline.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport EventCard from \"../comps/eventCard\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { Event } from \"../classes\";\n\nfunction Timeline(props) {\n  const todayEvents = props.events.filter(event => {\n    if (event.startTime instanceof Date) {\n      return event.startTime.getFullYear() === 2020 && event.startTime.getMonth() == 2 && event.startTime.getDay() == 23;\n    } else return false;\n  });\n\n  function fillEvents(events) {\n    var time = new Date(\"2020/2/20 0:00:00\");\n    var filledEvents = [];\n    events.map(event => {\n      if (time < event.startTime) {\n        filledEvents.push(new Event(\"\", null, time, event.startTime));\n        filledEvents.push(event);\n        time = event.endTime;\n      } else {\n        filledEvents.push(event);\n        time = event.endTime;\n      }\n    });\n    filledEvents.push(new Event(\"\", null, time, new Date(\"2020/2/20 23:59:59\")));\n    return filledEvents;\n  }\n\n  console.log(JSON.stringify(props.events.filter(event => {\n    if (event.startTime instanceof Date) {\n      return event.startTime.getFullYear() == 2020 && event.startTime.getMonth() == 2 && event.startTime.getDay() == 23;\n    } else return false;\n  })));\n  return fillEvents(todayEvents).map(event => {\n    if (event.cal !== null) {\n      return __jsx(Grid, {\n        container: true,\n        spacing: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, __jsx(Grid, {\n        item: true,\n        xs: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, __jsx(\"p\", {\n        style: {\n          color: \"white\",\n          fontSize: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, new Date(event.startTime).getHours(), \":\", (new Date(event.startTime).getMinutes() < 10 ? \"0\" : \"\") + new Date(event.startTime).getMinutes())), __jsx(Grid, {\n        item: true,\n        xs: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, __jsx(EventCard, {\n        event: event,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      })));\n    } else return __jsx(Grid, {\n      container: true,\n      spacing: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, __jsx(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), __jsx(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, __jsx(EventCard, {\n      event: event,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    })));\n  });\n}\n\nexport default Timeline;","map":{"version":3,"sources":["C:/Users/imyua/dev/calendar/comps/timeline.js"],"names":["EventCard","Grid","Event","Timeline","props","todayEvents","events","filter","event","startTime","Date","getFullYear","getMonth","getDay","fillEvents","time","filledEvents","map","push","endTime","console","log","JSON","stringify","cal","color","fontSize","getHours","getMinutes"],"mappings":"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","sourcesContent":["import EventCard from \"../comps/eventCard\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { Event } from \"../classes\";\r\n\r\nfunction Timeline(props) {\r\n    const todayEvents = props.events.filter(event => {\r\n        if (event.startTime instanceof Date) {\r\n            return (\r\n                event.startTime.getFullYear() === 2020 &&\r\n                event.startTime.getMonth() == 2 &&\r\n                event.startTime.getDay() == 23\r\n            );\r\n        } else return false;\r\n    });\r\n    function fillEvents(events) {\r\n        var time = new Date(\"2020/2/20 0:00:00\");\r\n        var filledEvents = [];\r\n        events.map(event => {\r\n            if (time < event.startTime) {\r\n                filledEvents.push(new Event(\"\", null, time, event.startTime));\r\n                filledEvents.push(event);\r\n                time = event.endTime;\r\n            } else {\r\n                filledEvents.push(event);\r\n                time = event.endTime;\r\n            }\r\n        });\r\n        filledEvents.push(new Event(\"\", null, time, new Date(\"2020/2/20 23:59:59\")));\r\n        return filledEvents;\r\n    }\r\n\r\n    console.log(\r\n        JSON.stringify(\r\n            props.events.filter(event => {\r\n                if (event.startTime instanceof Date) {\r\n                    return (\r\n                        event.startTime.getFullYear() == 2020 &&\r\n                        event.startTime.getMonth() == 2 &&\r\n                        event.startTime.getDay() == 23\r\n                    );\r\n                } else return false;\r\n            })\r\n        )\r\n    );\r\n    return fillEvents(todayEvents).map(event => {\r\n        if (event.cal !== null) {\r\n            return (\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={2}>\r\n                        <p style={{ color: \"white\", fontSize: 8 }}>\r\n                            {new Date(event.startTime).getHours()}:\r\n                            {(new Date(event.startTime).getMinutes() < 10 ? \"0\" : \"\") +\r\n                                new Date(event.startTime).getMinutes()}\r\n                        </p>\r\n                    </Grid>\r\n                    <Grid item xs={10}>\r\n                        <EventCard event={event} />\r\n                    </Grid>\r\n                </Grid>\r\n            );\r\n        } else\r\n            return (\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={2}></Grid>\r\n                    <Grid item xs={10}>\r\n                        <EventCard event={event} />\r\n                    </Grid>\r\n                </Grid>\r\n            );\r\n    });\r\n}\r\n\r\nexport default Timeline;\r\n"]},"metadata":{},"sourceType":"module"}