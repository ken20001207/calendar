{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport Container from \"@material-ui/core/container\";\nimport EventCard from \"../comps/eventCard\";\nimport { Event } from \"../classes\";\nimport TextField from \"@material-ui/core/TextField\";\n/** Parse .ics string into event array */\n\nfunction toEventArray(lines) {\n  return new Promise(resolve => {\n    var events = [];\n    var tempEvent = {\n      cal: \"重要事項\"\n    };\n    var reading = false;\n\n    for (var line = 0; line < lines.length; line++) {\n      if (lines[line].includes(\"BEGIN\") && lines[line].includes(\"VEVENT\")) {\n        reading = true;\n      } else if (lines[line].includes(\"END\") && lines[line].includes(\"VEVENT\")) {\n        if (tempEvent.title != undefined && tempEvent.cal != undefined && tempEvent.startTime != undefined && tempEvent.endTime != undefined) {\n          events.push(new Event({\n            title: tempEvent.title,\n            startTime: tempEvent.startTime,\n            endTime: tempEvent.endTime,\n            color: [\"#FFAF3A\", \"#8E5800\"]\n          }));\n        }\n\n        reading = false;\n      }\n\n      if (reading) {\n        if (lines[line].includes(\"DTSTART\")) {\n          tempEvent.startTime = calenDate(lines[line].split(\":\")[1]);\n        } else if (lines[line].includes(\"DTEND\")) {\n          tempEvent.endTime = calenDate(lines[line].split(\":\")[1]);\n        } else if (lines[line].split(\":\")[0] == \"SUMMARY\") {\n          tempEvent.title = lines[line].split(\":\")[1];\n        } else if (lines[line].split(\":\")[0] == \"LOCATION\") {\n          tempEvent.location = lines[line].split(\":\")[1];\n        } else if (lines[line].split(\":\")[0] == \"DESCRIPTION\") {\n          tempEvent.description = lines[line].split(\":\")[1];\n        }\n      }\n    }\n\n    resolve(events);\n  });\n}\n/** Parse string of ics date format into date object */\n\n\nfunction calenDate(icalStr) {\n  var strYear = icalStr.substr(0, 4);\n  var strMonth = parseInt(icalStr.substr(4, 2), 10) - 1;\n  var strDay = icalStr.substr(6, 2);\n  var strHour = icalStr.substr(9, 2);\n  var strMin = icalStr.substr(11, 2);\n  var strSec = icalStr.substr(13, 2);\n  var oDate = new Date(strYear, strMonth, strDay, strHour, strMin, strSec);\n  return oDate;\n}\n\nclass icstool extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onChangeHandler\", e => {\n      const file = e.target.files[0];\n      var reader = new FileReader();\n      const vm = this;\n\n      reader.onload = async function () {\n        var lines = this.result.split(\"\\n\");\n        vm.setState({\n          events: await toEventArray(lines)\n        });\n      };\n\n      reader.readAsText(file);\n    });\n\n    this.state = {\n      events: []\n    };\n  }\n\n  render() {\n    const eventcards = this.state.events.map(event => {\n      return __jsx(EventCard, {\n        event: event,\n        height: 90,\n        key: event.title\n      });\n    });\n    return __jsx(Container, {\n      maxWidth: \"xs\"\n    }, __jsx(\"input\", {\n      style: {\n        marginTop: this.state.events.length == 0 ? 360 : 60\n      },\n      type: \"file\",\n      name: \"file\",\n      onChange: this.onChangeHandler,\n      className: \"jsx-2817667622\"\n    }), __jsx(\"div\", {\n      style: {\n        marginTop: 30,\n        marginBottom: 30,\n        color: \"white\"\n      },\n      className: \"jsx-2817667622\"\n    }, JSON.stringify(this.state.events)), eventcards, __jsx(_JSXStyle, {\n      id: \"2817667622\"\n    }, [\"body{background:#333333;}\", \"::-webkit-scrollbar{width:5px;}\", \"::-webkit-scrollbar-track{-webkit-border-radius:10px;border-radius:10px;margin:80px 0 5px 0;}\", \"::-webkit-scrollbar-thumb{-webkit-border-radius:4px;border-radius:4px;background:rgb(80,80,80);}\"]));\n  }\n\n}\n\nexport default icstool;","map":null,"metadata":{},"sourceType":"module"}