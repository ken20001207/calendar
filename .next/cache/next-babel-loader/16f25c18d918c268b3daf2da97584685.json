{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\imyua\\\\dev\\\\calendar\\\\comps\\\\timeline.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport EventCard from \"../comps/eventCard\";\nimport Grid from \"@material-ui/core/Grid\";\n\nfunction Timeline(props) {\n  function fillEvents(events) {\n    var time = new Date(\"2020/2/20 0:00:00\");\n    var filledEvents = [];\n    events.map(event => {\n      if (time < event.startTime) {\n        var n = parseInt((event.startTime - time) / 3600000);\n        var count = 1;\n\n        for (; n >= 0; count++, n--) {\n          if (n > 0) {\n            var h = time.getHours() + count - 1;\n            filledEvents.push({\n              startTime: time.setHours(h),\n              endTime: time.setHours(h + 1),\n              cal: null\n            });\n          } else if (n == 0) {\n            filledEvents.push({\n              startTime: time.setHours(time.getHours() + count - 1),\n              endTime: event.startTime,\n              cal: null\n            });\n          }\n        }\n\n        filledEvents.push(event);\n        time = event.endTime;\n      } else {\n        filledEvents.push(event);\n        time = event.endTime;\n      }\n    });\n    return filledEvents;\n  }\n\n  return fillEvents(props.events).map(event => {\n    if (event.cal !== null) {\n      return __jsx(Grid, {\n        container: true,\n        spacing: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, __jsx(Grid, {\n        item: true,\n        xs: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, __jsx(\"p\", {\n        style: {\n          color: \"white\",\n          fontSize: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, event.startTime.getHours(), \" :\", \" \", (event.startTime.getMinutes() < 10 ? \"0\" : \"\") + event.startTime.getMinutes())), __jsx(Grid, {\n        item: true,\n        xs: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, __jsx(EventCard, {\n        event: event,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      })));\n    } else return __jsx(Grid, {\n      container: true,\n      spacing: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, __jsx(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), __jsx(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, __jsx(EventCard, {\n      event: event,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    })));\n  });\n}\n\nexport default Timeline;","map":{"version":3,"sources":["C:/Users/imyua/dev/calendar/comps/timeline.js"],"names":["EventCard","Grid","Timeline","props","fillEvents","events","time","Date","filledEvents","map","event","startTime","n","parseInt","count","h","getHours","push","setHours","endTime","cal","color","fontSize","getMinutes"],"mappings":"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","sourcesContent":["import EventCard from \"../comps/eventCard\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nfunction Timeline(props) {\r\n    function fillEvents(events) {\r\n        var time = new Date(\"2020/2/20 0:00:00\");\r\n        var filledEvents = [];\r\n        events.map(event => {\r\n            if (time < event.startTime) {\r\n                var n = parseInt((event.startTime - time) / 3600000);\r\n                var count = 1;\r\n                for (; n >= 0; count++, n--) {\r\n                    if (n > 0) {\r\n                        var h = time.getHours() + count - 1;\r\n                        filledEvents.push({\r\n                            startTime: time.setHours(h),\r\n                            endTime: time.setHours(h + 1),\r\n                            cal: null\r\n                        });\r\n                    } else if (n == 0) {\r\n                        filledEvents.push({\r\n                            startTime: time.setHours(time.getHours() + count - 1),\r\n                            endTime: event.startTime,\r\n                            cal: null\r\n                        });\r\n                    }\r\n                }\r\n                filledEvents.push(event);\r\n                time = event.endTime;\r\n            } else {\r\n                filledEvents.push(event);\r\n                time = event.endTime;\r\n            }\r\n        });\r\n        return filledEvents;\r\n    }\r\n\r\n    return fillEvents(props.events).map(event => {\r\n        if (event.cal !== null) {\r\n            return (\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={2}>\r\n                        <p style={{ color: \"white\", fontSize: 8 }}>\r\n                            {event.startTime.getHours()} :{\" \"}\r\n                            {(event.startTime.getMinutes() < 10 ? \"0\" : \"\") + event.startTime.getMinutes()}\r\n                        </p>\r\n                    </Grid>\r\n                    <Grid item xs={10}>\r\n                        <EventCard event={event} />\r\n                    </Grid>\r\n                </Grid>\r\n            );\r\n        } else\r\n            return (\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={2}></Grid>\r\n                    <Grid item xs={10}>\r\n                        <EventCard event={event} />\r\n                    </Grid>\r\n                </Grid>\r\n            );\r\n    });\r\n}\r\n\r\nexport default Timeline;\r\n"]},"metadata":{},"sourceType":"module"}