{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\imyua\\\\dev\\\\calendar\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport Container from \"@material-ui/core/container\";\nimport DayView from \"../comps/DayView\";\nimport fetch from \"isomorphic-unfetch\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { User, Calendar, Event } from \"../classes\";\nimport DayPicker from \"react-day-picker\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport Chip from \"@material-ui/core/Chip\";\nimport { TimePicker } from \"antd\";\nimport moment from 'moment';\n\nfunction startOfDay(date) {\n  if (!date instanceof Date) {\n    console.error(\"傳入的時間不是合法的 Date 物件。\");\n    return null;\n  }\n\n  date = new Date(date);\n  var time = new Date();\n  time.setTime(date.getTime());\n  time.setHours(0, 0, 0);\n  return time;\n}\n\nfunction endOfDay(date) {\n  if (!date instanceof Date) {\n    console.error(\"傳入的時間不是合法的 Date 物件。\");\n    return null;\n  }\n\n  date = new Date(date);\n  var time = new Date();\n  time.setTime(date.getTime());\n  time.setHours(23, 59, 59);\n  return time;\n}\n\nfunction fillEvents(events, date) {\n  var filled = new Array();\n  var time = startOfDay(date);\n  events.map(event => {\n    var startTime = new Date(event.startTime);\n    var endTime = new Date(event.endTime);\n\n    if (startTime.getHours() > endTime.getHours()) {\n      endTime.setHours(23, 59, 59);\n    }\n\n    filled.push(new Event({\n      startTime: time,\n      endTime: startTime\n    }, true));\n    filled.push(event);\n    time.setTime(endTime.getTime());\n  });\n  filled.push(new Event({\n    startTime: time,\n    endTime: endOfDay(date)\n  }, true));\n  return filled;\n}\n\nfunction eventsToDispay(calendars, date) {\n  var eventsToDispay = [];\n  calendars.map(calendar => {\n    calendar = new Calendar(calendar);\n    calendar.events.map(event => {\n      if (event.startTime.getFullYear() == date.getFullYear() && event.startTime.getMonth() == date.getMonth() && event.startTime.getDate() == date.getDate() && !event.isAllDayEvent()) {\n        eventsToDispay.push(event);\n      }\n    });\n  });\n  eventsToDispay.sort((a, b) => a.startTime - b.startTime);\n  return eventsToDispay;\n}\n\nclass index extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedDay: new Date(),\n      eventsToDispay: [],\n      userdata: {},\n      filled: [],\n      selectedEvent: new Event({\n        title: \"選中的事件\",\n        startTime: new Date(),\n        endTime: new Date(),\n        color: [\"#fd3721\", \"#b721ff\"]\n      })\n    };\n    this.handleDayClick = this.handleDayClick.bind(this);\n  }\n\n  async handleDayClick(day, {\n    selected\n  }) {\n    this.setState({\n      selectedDay: selected ? new Date() : day\n    });\n  }\n\n  static async getInitialProps() {\n    const res = await fetch(\"http://localhost:3000/api/getuserdata\");\n    const json = await res.json();\n    var userdata = new User(json);\n    var etd = eventsToDispay(userdata.calendars, new Date());\n    var filled = fillEvents(eventsToDispay(userdata.calendars, new Date()), new Date());\n    return {\n      userdata: userdata,\n      filled: filled,\n      eventsToDispay: etd\n    };\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      var filled = fillEvents(this.props.eventsToDispay, new Date());\n      this.setState({\n        filled: filled,\n        userdata: this.props.userdata\n      });\n    }, 200);\n    setTimeout(() => {\n      fetch(\"http://localhost:3000/api/updateuserdata\", {\n        method: \"post\",\n        body: JSON.stringify({\n          calendars: this.state.userdata.calendars\n        })\n      });\n    }, 1000);\n  }\n\n  render() {\n    if (this.state.userdata.calendars != undefined) {\n      var filled = fillEvents(eventsToDispay(this.state.userdata.calendars, this.state.selectedDay), this.state.selectedDay);\n      return __jsx(Container, {\n        maxWidth: \"md\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, __jsx(Grid, {\n        container: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, __jsx(Grid, {\n        item: true,\n        xs: 5,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        style: {\n          marginTop: 80\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, __jsx(DayPicker, {\n        selectedDays: this.state.selectedDay,\n        onDayClick: this.handleDayClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }))), __jsx(Grid, {\n        item: true,\n        xs: 7,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        style: {\n          overflowY: \"scroll\",\n          maxHeight: \"90vh\",\n          padding: 24\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, __jsx(DayView, {\n        events: filled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      })))), __jsx(Dialog, {\n        maxWidth: \"xs\",\n        fullWidth: true,\n        open: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, __jsx(Container, {\n        maxWidth: \"lg\",\n        style: {\n          backgroundColor: \"#333333\",\n          paddingTop: 30,\n          paddingBottom: 30\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, __jsx(Chip, {\n        size: \"small\",\n        label: \"\\u91CD\\u8981\\u4E8B\\u9805\",\n        style: {\n          backgroundImage: \"linear-gradient(315deg, \" + this.state.selectedEvent.color[0] + \" 0%, \" + this.state.selectedEvent.color[1] + \" 100%)\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }), __jsx(\"h2\", {\n        style: {\n          color: \"white\",\n          marginTop: 10\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, \"\\u4E8B\\u4EF6\\u6A19\\u984C\"), __jsx(TimePicker, {\n        defaultValue: moment('12:08', \"HH:mm\"),\n        format: \"HH:mm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }))));\n    } else {\n      return __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, \"loading\");\n    }\n  }\n\n}\n\nexport default index;","map":{"version":3,"sources":["C:/Users/imyua/dev/calendar/pages/index.js"],"names":["React","Container","DayView","fetch","Grid","User","Calendar","Event","DayPicker","Dialog","Chip","TimePicker","moment","startOfDay","date","Date","console","error","time","setTime","getTime","setHours","endOfDay","fillEvents","events","filled","Array","map","event","startTime","endTime","getHours","push","eventsToDispay","calendars","calendar","getFullYear","getMonth","getDate","isAllDayEvent","sort","a","b","index","Component","constructor","props","state","selectedDay","userdata","selectedEvent","title","color","handleDayClick","bind","day","selected","setState","getInitialProps","res","json","etd","componentDidMount","setTimeout","method","body","JSON","stringify","render","undefined","marginTop","overflowY","maxHeight","padding","backgroundColor","paddingTop","paddingBottom","backgroundImage"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Container from \"@material-ui/core/container\";\r\nimport DayView from \"../comps/DayView\";\r\nimport fetch from \"isomorphic-unfetch\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { User, Calendar, Event } from \"../classes\";\r\nimport DayPicker from \"react-day-picker\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport { TimePicker } from \"antd\";\r\nimport moment from 'moment';\r\n\r\nfunction startOfDay(date) {\r\n    if (!date instanceof Date) {\r\n        console.error(\"傳入的時間不是合法的 Date 物件。\");\r\n        return null;\r\n    }\r\n    date = new Date(date);\r\n    var time = new Date();\r\n    time.setTime(date.getTime());\r\n    time.setHours(0, 0, 0);\r\n    return time;\r\n}\r\n\r\nfunction endOfDay(date) {\r\n    if (!date instanceof Date) {\r\n        console.error(\"傳入的時間不是合法的 Date 物件。\");\r\n        return null;\r\n    }\r\n    date = new Date(date);\r\n    var time = new Date();\r\n    time.setTime(date.getTime());\r\n    time.setHours(23, 59, 59);\r\n    return time;\r\n}\r\n\r\nfunction fillEvents(events, date) {\r\n    var filled = new Array();\r\n    var time = startOfDay(date);\r\n    events.map(event => {\r\n        var startTime = new Date(event.startTime);\r\n        var endTime = new Date(event.endTime);\r\n        if (startTime.getHours() > endTime.getHours()) {\r\n            endTime.setHours(23, 59, 59);\r\n        }\r\n        filled.push(new Event({ startTime: time, endTime: startTime }, true));\r\n        filled.push(event);\r\n        time.setTime(endTime.getTime());\r\n    });\r\n    filled.push(new Event({ startTime: time, endTime: endOfDay(date) }, true));\r\n    return filled;\r\n}\r\n\r\nfunction eventsToDispay(calendars, date) {\r\n    var eventsToDispay = [];\r\n    calendars.map(calendar => {\r\n        calendar = new Calendar(calendar);\r\n        calendar.events.map(event => {\r\n            if (\r\n                event.startTime.getFullYear() == date.getFullYear() &&\r\n                event.startTime.getMonth() == date.getMonth() &&\r\n                event.startTime.getDate() == date.getDate() &&\r\n                !event.isAllDayEvent()\r\n            ) {\r\n                eventsToDispay.push(event);\r\n            }\r\n        });\r\n    });\r\n    eventsToDispay.sort((a, b) => a.startTime - b.startTime);\r\n    return eventsToDispay;\r\n}\r\n\r\nclass index extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedDay: new Date(),\r\n            eventsToDispay: [],\r\n            userdata: {},\r\n            filled: [],\r\n            selectedEvent: new Event({\r\n                title: \"選中的事件\",\r\n                startTime: new Date(),\r\n                endTime: new Date(),\r\n                color: [\"#fd3721\", \"#b721ff\"]\r\n            })\r\n        };\r\n        this.handleDayClick = this.handleDayClick.bind(this);\r\n    }\r\n\r\n    async handleDayClick(day, { selected }) {\r\n        this.setState({\r\n            selectedDay: selected ? new Date() : day\r\n        });\r\n    }\r\n\r\n    static async getInitialProps() {\r\n        const res = await fetch(\"http://localhost:3000/api/getuserdata\");\r\n        const json = await res.json();\r\n        var userdata = new User(json);\r\n        var etd = eventsToDispay(userdata.calendars, new Date());\r\n        var filled = fillEvents(eventsToDispay(userdata.calendars, new Date()), new Date());\r\n        return { userdata: userdata, filled: filled, eventsToDispay: etd };\r\n    }\r\n\r\n    componentDidMount() {\r\n        setTimeout(() => {\r\n            var filled = fillEvents(this.props.eventsToDispay, new Date());\r\n            this.setState({ filled: filled, userdata: this.props.userdata });\r\n        }, 200);\r\n        setTimeout(() => {\r\n            fetch(\"http://localhost:3000/api/updateuserdata\", { method: \"post\", body: JSON.stringify({ calendars: this.state.userdata.calendars }) });\r\n        }, 1000);\r\n    }\r\n\r\n    render() {\r\n        if (this.state.userdata.calendars != undefined) {\r\n            var filled = fillEvents(eventsToDispay(this.state.userdata.calendars, this.state.selectedDay), this.state.selectedDay);\r\n\r\n            return (\r\n                <Container maxWidth=\"md\">\r\n                    <Grid container>\r\n                        <Grid item xs={5}>\r\n                            <div style={{ marginTop: 80 }}>\r\n                                <DayPicker selectedDays={this.state.selectedDay} onDayClick={this.handleDayClick} />\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={7}>\r\n                            <div\r\n                                style={{\r\n                                    overflowY: \"scroll\",\r\n                                    maxHeight: \"90vh\",\r\n                                    padding: 24\r\n                                }}\r\n                            >\r\n                                <DayView events={filled} />\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Dialog maxWidth={\"xs\"} fullWidth={true} open={true}>\r\n                        <Container maxWidth=\"lg\" style={{ backgroundColor: \"#333333\", paddingTop: 30,paddingBottom: 30 }}>\r\n                            <Chip\r\n                                size=\"small\"\r\n                                label=\"重要事項\"\r\n                                style={{\r\n                                    backgroundImage:\r\n                                        \"linear-gradient(315deg, \" + this.state.selectedEvent.color[0] + \" 0%, \" + this.state.selectedEvent.color[1] + \" 100%)\"\r\n                                }}\r\n                            />\r\n                            <h2 style={{ color: \"white\", marginTop: 10 }}>事件標題</h2>\r\n                            <TimePicker defaultValue={moment('12:08', \"HH:mm\")} format={\"HH:mm\"} />\r\n                        </Container>\r\n                    </Dialog>\r\n                </Container>\r\n            );\r\n        } else {\r\n            return <p>loading</p>;\r\n        }\r\n    }\r\n}\r\n\r\nexport default index;\r\n"]},"metadata":{},"sourceType":"module"}