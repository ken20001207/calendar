{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\imyua\\\\dev\\\\calendar\\\\comps\\\\timeline.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport EventCard from \"../comps/eventCard\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { Event } from \"../classes\";\n\nfunction Timeline(props) {\n  const todayEvents = props.events.filter(event => {\n    var d = new Date(event.startTime); // todo: Time is not Date object!\n\n    return d.getFullYear() == 2020 && d.getMonth() == 2 && d.getDay() == 1;\n  });\n\n  function fillEvents(events) {\n    var time = new Date(\"2020/2/20 0:00:00\");\n    var filledEvents = [];\n    events.map(event => {\n      if (time < event.startTime) {\n        filledEvents.push(new Event(\"\", null, time, event.startTime));\n        filledEvents.push(event);\n        time = event.endTime;\n      } else {\n        filledEvents.push(event);\n        time = event.endTime;\n      }\n    });\n    filledEvents.push(new Event(\"\", null, time, new Date(\"2020/2/20 23:59:59\")));\n    return filledEvents;\n  }\n\n  return fillEvents(todayEvents).map(event => {\n    if (event.cal !== null) {\n      return __jsx(Grid, {\n        container: true,\n        spacing: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, __jsx(Grid, {\n        item: true,\n        xs: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, __jsx(\"p\", {\n        style: {\n          color: \"white\",\n          fontSize: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, new Date(event.startTime).getHours(), \":\", (new Date(event.startTime).getMinutes() < 10 ? \"0\" : \"\") + new Date(event.startTime).getMinutes())), __jsx(Grid, {\n        item: true,\n        xs: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, __jsx(EventCard, {\n        event: event,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      })));\n    } else return __jsx(Grid, {\n      container: true,\n      spacing: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, __jsx(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }), __jsx(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, __jsx(EventCard, {\n      event: event,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    })));\n  });\n}\n\nexport default Timeline;","map":{"version":3,"sources":["C:/Users/imyua/dev/calendar/comps/timeline.js"],"names":["EventCard","Grid","Event","Timeline","props","todayEvents","events","filter","event","d","Date","startTime","getFullYear","getMonth","getDay","fillEvents","time","filledEvents","map","push","endTime","cal","color","fontSize","getHours","getMinutes"],"mappings":"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","sourcesContent":["import EventCard from \"../comps/eventCard\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { Event } from \"../classes\";\r\n\r\nfunction Timeline(props) {\r\n    const todayEvents = props.events.filter(event => {\r\n        var d = new Date(event.startTime); // todo: Time is not Date object!\r\n        return d.getFullYear() == 2020 && d.getMonth() == 2 && d.getDay() == 1;\r\n    });\r\n    function fillEvents(events) {\r\n        var time = new Date(\"2020/2/20 0:00:00\");\r\n        var filledEvents = [];\r\n        events.map(event => {\r\n            if (time < event.startTime) {\r\n                filledEvents.push(new Event(\"\", null, time, event.startTime));\r\n                filledEvents.push(event);\r\n                time = event.endTime;\r\n            } else {\r\n                filledEvents.push(event);\r\n                time = event.endTime;\r\n            }\r\n        });\r\n        filledEvents.push(new Event(\"\", null, time, new Date(\"2020/2/20 23:59:59\")));\r\n        return filledEvents;\r\n    }\r\n\r\n    return fillEvents(todayEvents).map(event => {\r\n        if (event.cal !== null) {\r\n            return (\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={2}>\r\n                        <p style={{ color: \"white\", fontSize: 8 }}>\r\n                            {new Date(event.startTime).getHours()}:\r\n                            {(new Date(event.startTime).getMinutes() < 10 ? \"0\" : \"\") +\r\n                                new Date(event.startTime).getMinutes()}\r\n                        </p>\r\n                    </Grid>\r\n                    <Grid item xs={10}>\r\n                        <EventCard event={event} />\r\n                    </Grid>\r\n                </Grid>\r\n            );\r\n        } else\r\n            return (\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={2}></Grid>\r\n                    <Grid item xs={10}>\r\n                        <EventCard event={event} />\r\n                    </Grid>\r\n                </Grid>\r\n            );\r\n    });\r\n}\r\n\r\nexport default Timeline;\r\n"]},"metadata":{},"sourceType":"module"}