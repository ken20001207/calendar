{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\imyua\\\\dev\\\\calendar\\\\comps\\\\timeline.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport EventCard from \"../comps/eventCard\";\nimport Grid from \"@material-ui/core/Grid\";\n\nfunction fillPerOneHour(filledEvents, from, to) {\n  var pointer = from;\n\n  if (from.getMinutes() > 0) {\n    var temp = from.setHours(from.getHours() + 1);\n    filledEvents.push({\n      startTime: from,\n      endTime: temp.setMinutes(0),\n      cal: null\n    });\n    pointer = from.setHours(from.getHours() + 1).setMinutes(0);\n  }\n\n  while (to.getHours() > pointer.getHours()) {\n    var temp = pointer.setHours(pointer.getHours() + 1);\n    filledEvents.push({\n      startTime: pointer,\n      endTime: temp.setMinutes(0),\n      cal: null\n    });\n    pointer = temp.setMinutes(0);\n  }\n}\n\nfunction Timeline(props) {\n  var style = {\n    color: \"white\",\n    fontSize: 8,\n    lineHeight: 4\n  };\n\n  function fillEvents(events) {\n    var time = new Date(\"2020/2/20 0:00:00\");\n    var filledEvents = [];\n    events.map(function (event) {\n      if (time < event.startTime) {\n        fillPerOneHour(filledEvents, time, event.startTime);\n        filledEvents.push(event);\n        time = event.endTime;\n      } else {\n        filledEvents.push(event);\n        time = event.endTime;\n      }\n    });\n    filledEvents.push({\n      startTime: time,\n      endTime: new Date(\"2020/2/20 24:00:00\"),\n      cal: null\n    });\n    return filledEvents;\n  }\n\n  return fillEvents(props.events).map(function (event) {\n    if (event.cal !== null) {\n      return __jsx(Grid, {\n        container: true,\n        spacing: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, __jsx(Grid, {\n        item: true,\n        xs: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, __jsx(\"p\", {\n        style: {\n          color: \"white\",\n          fontSize: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, event.startTime.getHours(), \":\", (event.startTime.getMinutes() < 10 ? \"0\" : \"\") + event.startTime.getMinutes())), __jsx(Grid, {\n        item: true,\n        xs: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, __jsx(EventCard, {\n        event: event,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      })));\n    } else return __jsx(Grid, {\n      container: true,\n      spacing: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, __jsx(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), __jsx(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, __jsx(EventCard, {\n      event: event,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    })));\n  });\n}\n\nexport default Timeline;","map":{"version":3,"sources":["C:/Users/imyua/dev/calendar/comps/timeline.js"],"names":["EventCard","Grid","fillPerOneHour","filledEvents","from","to","pointer","getMinutes","temp","setHours","getHours","push","startTime","endTime","setMinutes","cal","Timeline","props","style","color","fontSize","lineHeight","fillEvents","events","time","Date","map","event"],"mappings":"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","sourcesContent":["import EventCard from \"../comps/eventCard\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nfunction fillPerOneHour(filledEvents, from, to) {\r\n    var pointer = from;\r\n    if (from.getMinutes() > 0) {\r\n        var temp = from.setHours(from.getHours() + 1);\r\n        filledEvents.push({\r\n            startTime: from,\r\n            endTime: temp.setMinutes(0),\r\n            cal: null\r\n        });\r\n        pointer = from.setHours(from.getHours() + 1).setMinutes(0);\r\n    }\r\n    while (to.getHours() > pointer.getHours()) {\r\n        var temp = pointer.setHours(pointer.getHours() + 1);\r\n        filledEvents.push({\r\n            startTime: pointer,\r\n            endTime: temp.setMinutes(0),\r\n            cal: null\r\n        });\r\n        pointer = temp.setMinutes(0);\r\n    }\r\n}\r\n\r\nfunction Timeline(props) {\r\n    const style = {\r\n        color: \"white\",\r\n        fontSize: 8,\r\n        lineHeight: 4\r\n    };\r\n\r\n    function fillEvents(events) {\r\n        var time = new Date(\"2020/2/20 0:00:00\");\r\n        var filledEvents = [];\r\n        events.map(event => {\r\n            if (time < event.startTime) {\r\n                fillPerOneHour(filledEvents, time, event.startTime);\r\n                filledEvents.push(event);\r\n                time = event.endTime;\r\n            } else {\r\n                filledEvents.push(event);\r\n                time = event.endTime;\r\n            }\r\n        });\r\n        filledEvents.push({\r\n            startTime: time,\r\n            endTime: new Date(\"2020/2/20 24:00:00\"),\r\n            cal: null\r\n        });\r\n        return filledEvents;\r\n    }\r\n\r\n    return fillEvents(props.events).map(event => {\r\n        if (event.cal !== null) {\r\n            return (\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={2}>\r\n                        <p style={{ color: \"white\", fontSize: 8 }}>\r\n                            {event.startTime.getHours()}:\r\n                            {(event.startTime.getMinutes() < 10 ? \"0\" : \"\") + event.startTime.getMinutes()}\r\n                        </p>\r\n                    </Grid>\r\n                    <Grid item xs={10}>\r\n                        <EventCard event={event} />\r\n                    </Grid>\r\n                </Grid>\r\n            );\r\n        } else\r\n            return (\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={2}></Grid>\r\n                    <Grid item xs={10}>\r\n                        <EventCard event={event} />\r\n                    </Grid>\r\n                </Grid>\r\n            );\r\n    });\r\n}\r\n\r\nexport default Timeline;\r\n"]},"metadata":{},"sourceType":"module"}