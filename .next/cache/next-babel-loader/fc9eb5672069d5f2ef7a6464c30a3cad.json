{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { Event } from \"../classes\";\n\nvar EventCard =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(EventCard, _React$Component);\n\n  function EventCard(props) {\n    var _this;\n\n    _classCallCheck(this, EventCard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EventCard).call(this, props));\n    _this.state = {\n      elevation: 0\n    };\n    _this.handleMouseOver = _this.handleMouseOver.bind(_assertThisInitialized(_this));\n    _this.handleMouseLeave = _this.handleMouseLeave.bind(_assertThisInitialized(_this));\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_this));\n    _this.handleEmptyCardClick = _this.handleEmptyCardClick.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(EventCard, [{\n    key: \"handleMouseOver\",\n    value: function handleMouseOver() {\n      this.setState({\n        elevation: 20\n      });\n    }\n  }, {\n    key: \"handleMouseLeave\",\n    value: function handleMouseLeave() {\n      this.setState({\n        elevation: 0\n      });\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick() {\n      this.props.openEventEditDialog(this.props.event);\n    }\n  }, {\n    key: \"handleEmptyCardClick\",\n    value: function handleEmptyCardClick() {\n      this.props.openEventCreateDialog(this.props.event);\n    }\n  }, {\n    key: \"emptyCard\",\n    value: function emptyCard(startTime, endTime) {\n      endTime = endTime;\n      startTime = startTime;\n      var duration = (endTime - startTime) / 60000;\n      var cardStyle = {\n        height: duration,\n        backgroundColor: \"transparent\",\n        borderBottomStyle: endTime.getMinutes() == 0 ? \"solid\" : \"none\",\n        borderBottomColor: \"#444444\",\n        borderBottomWidth: 1,\n        borderTopStyle: startTime.getMinutes() == 0 ? \"solid\" : \"none\",\n        borderTopColor: \"#444444\",\n        borderTopWidth: 1\n      };\n      return __jsx(\"div\", {\n        style: cardStyle,\n        key: startTime.getTime(),\n        onClick: this.handleEmptyCardClick\n      });\n    }\n  }, {\n    key: \"EmptySections\",\n    value: function EmptySections(start, end) {\n      if (end.getHours() < start.getHours()) {\n        end.setHours(23, 59, 59);\n      }\n\n      var arr = new Array(end.getHours() - start.getHours() + 1);\n\n      if (start.getHours() == end.getHours()) {\n        arr[0] = this.emptyCard(start, end);\n      } else if (start.getHours() + 1 == end.getHours()) {\n        var a = new Date(end);\n        a.setMinutes(0);\n        arr[0] = this.emptyCard(start, a);\n        arr[1] = this.emptyCard(a, end);\n      } else {\n        var a = new Date(start);\n        a.setHours(start.getHours() + 1, 0);\n        arr[0] = this.emptyCard(start, a);\n\n        for (var i = start.getHours() + 1, j = 1; i < end.getHours(); i++, j++) {\n          var a = new Date(start);\n          a.setHours(i, 0);\n          var b = new Date(start);\n          b.setHours(i + 1, 0);\n          arr[j] = this.emptyCard(a, b);\n        }\n\n        var a = new Date(end);\n        a.setMinutes(0);\n        arr[end.getHours() - start.getHours()] = this.emptyCard(a, end);\n      }\n\n      return arr;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.props.event instanceof Event) {\n        if (this.props.event.isEmpty) {\n          return this.EmptySections(this.props.event.startTime, this.props.event.endTime).map(function (emptyCard) {\n            return emptyCard;\n          });\n        } else {\n          var style = {\n            height: this.props.height != undefined ? this.props.height : this.props.event.duration,\n            backgroundImage: \"linear-gradient(315deg, \" + this.props.event.color[0] + \" 0%, \" + this.props.event.color[1] + \" 100%)\",\n            fontSize: 8,\n            paddingLeft: 16,\n            marginTop: this.props.height != undefined ? 15 : 0,\n            paddingTop: 6,\n            paddingBottom: 6\n          };\n          /** compose event info of card */\n\n          var lineAmount = this.props.height != undefined ? _parseInt(this.props.height / 20) > 1 ? _parseInt(this.props.height / 20) - 1 : 1 : _parseInt(this.props.event.duration / 20) > 1 ? _parseInt(this.props.event.duration / 20) - 1 : 1;\n          var eventInfo = [];\n          eventInfo.push(this.props.event.isAllDayEvent() ? __jsx(\"p\", {\n            key: \"title\",\n            style: {\n              color: \"white\"\n            }\n          }, this.props.event.title, \" \") : __jsx(\"p\", {\n            key: \"title\",\n            style: {\n              color: \"white\"\n            }\n          }, this.props.event.title, \" \", __jsx(\"strong\", {\n            style: {\n              marginLeft: 16,\n              color: \"rgba(255,255,255,0.4)\"\n            }\n          }, this.props.event.getDurationString())));\n          if (!this.props.event.isAllDayEvent()) eventInfo.push(__jsx(\"p\", {\n            style: {\n              color: \"rgba(255,255,255,0.8)\"\n            },\n            key: \"duration\"\n          }, this.props.event.duration, \" \\u5206\\u9418\"));else {\n            eventInfo.push(__jsx(\"p\", {\n              style: {\n                color: \"rgba(255,255,255,0.8)\"\n              },\n              key: \"duration\"\n            }, \"\\u5168\\u5929\\u4E8B\\u4EF6\"));\n          }\n          eventInfo.push(__jsx(\"p\", {\n            style: {\n              color: \"rgba(255,255,255,0.8)\"\n            },\n            key: \"cal\"\n          }, this.props.event.calendarTitle));\n          return __jsx(Paper, {\n            style: style,\n            elevation: this.state.elevation,\n            onMouseEnter: this.handleMouseOver,\n            onMouseLeave: this.handleMouseLeave,\n            onClick: this.handleClick,\n            key: this.props.event.id\n          }, eventInfo.slice(0, lineAmount).map(function (info) {\n            return info;\n          }));\n        }\n      } else {\n        console.error(\"渲染事件卡片時接收到了不符合規範的 Event 物件。\");\n        return null;\n      }\n    }\n  }]);\n\n  return EventCard;\n}(React.Component);\n\nexport default EventCard;","map":null,"metadata":{},"sourceType":"module"}