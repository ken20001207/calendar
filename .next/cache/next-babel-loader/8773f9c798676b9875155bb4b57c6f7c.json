{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\imyua\\\\dev\\\\calendar\\\\comps\\\\timeline.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport EventCard from \"../comps/eventCard\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { Event } from \"../classes\";\n\nfunction Timeline(props) {\n  var todayEvents = props.events.filter(function (event) {\n    if (event.startTime instanceof Date) {\n      return event.startTime.getFullYear() === 2020 && event.startTime.getMonth() + 1 == 2 && event.startTime.getDate() == 23;\n    } else return false;\n  });\n\n  function fillEvents(events) {\n    var time = new Date().setHours(0, 0, 0);\n    var filledEvents = [];\n    events.map(function (event) {\n      if (time < event.startTime) {\n        filledEvents.push(new Event({\n          startTime: time,\n          endTime: event.startTime\n        }, true));\n        filledEvents.push(event);\n        time = event.endTime;\n      } else {\n        filledEvents.push(event);\n        time = event.endTime;\n      }\n    });\n    filledEvents.push(new Event({\n      startTime: time,\n      endTime: new Date(\"2020/2/23 23:59:59\")\n    }, true));\n    return filledEvents;\n  }\n\n  return fillEvents(todayEvents).map(function (event) {\n    if (!event.isEmpty) {\n      return __jsx(Grid, {\n        container: true,\n        spacing: 1,\n        key: event.startTime,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, __jsx(Grid, {\n        item: true,\n        xs: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, __jsx(\"p\", {\n        style: {\n          color: \"white\",\n          fontSize: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, event.startTime.getHours(), \":\", event.startTime.getMinutes() < 10 ? \"0\" : \"\" + event.startTime.getMinutes())), __jsx(Grid, {\n        item: true,\n        xs: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, __jsx(EventCard, {\n        key: event.startTime,\n        event: event,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      })));\n    } else {\n      return __jsx(Grid, {\n        container: true,\n        spacing: 1,\n        key: event.startTime,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, __jsx(Grid, {\n        item: true,\n        xs: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }), __jsx(Grid, {\n        item: true,\n        xs: 10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, __jsx(EventCard, {\n        event: event,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      })));\n    }\n  });\n}\n\nexport default Timeline;","map":{"version":3,"sources":["C:/Users/imyua/dev/calendar/comps/timeline.js"],"names":["EventCard","Grid","Event","Timeline","props","todayEvents","events","filter","event","startTime","Date","getFullYear","getMonth","getDate","fillEvents","time","setHours","filledEvents","map","push","endTime","isEmpty","color","fontSize","getHours","getMinutes"],"mappings":"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","sourcesContent":["import EventCard from \"../comps/eventCard\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { Event } from \"../classes\";\r\n\r\nfunction Timeline(props) {\r\n    const todayEvents = props.events.filter(event => {\r\n        if (event.startTime instanceof Date) {\r\n            return (\r\n                event.startTime.getFullYear() === 2020 &&\r\n                event.startTime.getMonth() + 1 == 2 &&\r\n                event.startTime.getDate() == 23\r\n            );\r\n        } else return false;\r\n    });\r\n    function fillEvents(events) {\r\n        var time = new Date().setHours(0, 0, 0);\r\n        var filledEvents = [];\r\n        events.map(event => {\r\n            if (time < event.startTime) {\r\n                filledEvents.push(new Event({ startTime: time, endTime: event.startTime }, true));\r\n                filledEvents.push(event);\r\n                time = event.endTime;\r\n            } else {\r\n                filledEvents.push(event);\r\n                time = event.endTime;\r\n            }\r\n        });\r\n        filledEvents.push(new Event({ startTime: time, endTime: new Date(\"2020/2/23 23:59:59\") }, true));\r\n        return filledEvents;\r\n    }\r\n    return fillEvents(todayEvents).map(event => {\r\n        if (!event.isEmpty) {\r\n            return (\r\n                <Grid container spacing={1} key={event.startTime}>\r\n                    <Grid item xs={2}>\r\n                        <p style={{ color: \"white\", fontSize: 8 }}>\r\n                            {event.startTime.getHours()}:\r\n                            {event.startTime.getMinutes() < 10 ? \"0\" : \"\" + event.startTime.getMinutes()}\r\n                        </p>\r\n                    </Grid>\r\n                    <Grid item xs={10}>\r\n                        <EventCard key={event.startTime} event={event} />\r\n                    </Grid>\r\n                </Grid>\r\n            );\r\n        } else {\r\n            return (\r\n                <Grid container spacing={1} key={event.startTime}>\r\n                    <Grid item xs={2}></Grid>\r\n                    <Grid item xs={10}>\r\n                        <EventCard event={event} />\r\n                    </Grid>\r\n                </Grid>\r\n            );\r\n        }\r\n    });\r\n}\r\n\r\nexport default Timeline;\r\n"]},"metadata":{},"sourceType":"module"}