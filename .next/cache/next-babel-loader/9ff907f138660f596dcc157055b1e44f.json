{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\imyua\\\\dev\\\\calendar\\\\comps\\\\timeline.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport EventCard from \"../comps/eventCard\";\nimport Grid from \"@material-ui/core/Grid\";\n\nfunction Timeline(props) {\n  const style = {\n    color: \"white\",\n    fontSize: 8,\n    lineHeight: 4\n  };\n\n  function fillEvents(events) {\n    var time = 0;\n    var filledEvents = [];\n    events.map(event => {\n      if (time < event.startTime) {\n        filledEvents.push({\n          startTime: time,\n          endTime: event.startTime,\n          cal: null\n        });\n        filledEvents.push(event);\n        time = event.endTime;\n      } else {\n        filledEvents.push(event);\n        time = event.endTime;\n      }\n    });\n    return filledEvents;\n  }\n\n  if (event.cal !== null) {\n    return fillEvents(props.events).map(event => __jsx(Grid, {\n      container: true,\n      spacing: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, __jsx(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, __jsx(\"p\", {\n      style: {\n        color: \"white\",\n        fontSize: 16\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, parseInt(event.startTime / 60), \" :\", \" \", event.startTime % 60)), __jsx(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, __jsx(EventCard, {\n      event: event,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }))));\n  } else {\n    return fillEvents(props.events).map(event => __jsx(Grid, {\n      container: true,\n      spacing: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, __jsx(Grid, {\n      item: true,\n      xs: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }), __jsx(Grid, {\n      item: true,\n      xs: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, __jsx(EventCard, {\n      event: event,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }))));\n  }\n}\n\nexport default Timeline;","map":{"version":3,"sources":["C:/Users/imyua/dev/calendar/comps/timeline.js"],"names":["EventCard","Grid","Timeline","props","style","color","fontSize","lineHeight","fillEvents","events","time","filledEvents","map","event","startTime","push","endTime","cal","parseInt"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,oBAAtB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACrB,QAAMC,KAAK,GAAG;AACVC,IAAAA,KAAK,EAAE,OADG;AAEVC,IAAAA,QAAQ,EAAE,CAFA;AAGVC,IAAAA,UAAU,EAAE;AAHF,GAAd;;AAMA,WAASC,UAAT,CAAoBC,MAApB,EAA4B;AACxB,QAAIC,IAAI,GAAG,CAAX;AACA,QAAIC,YAAY,GAAG,EAAnB;AACAF,IAAAA,MAAM,CAACG,GAAP,CAAWC,KAAK,IAAI;AAChB,UAAIH,IAAI,GAAGG,KAAK,CAACC,SAAjB,EAA4B;AACxBH,QAAAA,YAAY,CAACI,IAAb,CAAkB;AACdD,UAAAA,SAAS,EAAEJ,IADG;AAEdM,UAAAA,OAAO,EAAEH,KAAK,CAACC,SAFD;AAGdG,UAAAA,GAAG,EAAE;AAHS,SAAlB;AAKAN,QAAAA,YAAY,CAACI,IAAb,CAAkBF,KAAlB;AACAH,QAAAA,IAAI,GAAGG,KAAK,CAACG,OAAb;AACH,OARD,MAQO;AACHL,QAAAA,YAAY,CAACI,IAAb,CAAkBF,KAAlB;AACAH,QAAAA,IAAI,GAAGG,KAAK,CAACG,OAAb;AACH;AACJ,KAbD;AAcA,WAAOL,YAAP;AACH;;AAED,MAAIE,KAAK,CAACI,GAAN,KAAc,IAAlB,EAAwB;AACpB,WAAOT,UAAU,CAACL,KAAK,CAACM,MAAP,CAAV,CAAyBG,GAAzB,CAA6BC,KAAK,IACrC,MAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAE,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAG,MAAA,KAAK,EAAE;AAAER,QAAAA,KAAK,EAAE,OAAT;AAAkBC,QAAAA,QAAQ,EAAE;AAA5B,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKY,QAAQ,CAACL,KAAK,CAACC,SAAN,GAAkB,EAAnB,CADb,QACuC,GADvC,EAEKD,KAAK,CAACC,SAAN,GAAkB,EAFvB,CADJ,CADJ,EAOI,MAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,SAAD;AAAW,MAAA,KAAK,EAAED,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAPJ,CADG,CAAP;AAaH,GAdD,MAcO;AACH,WAAOL,UAAU,CAACL,KAAK,CAACM,MAAP,CAAV,CAAyBG,GAAzB,CAA6BC,KAAK,IACrC,MAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAE,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,MAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,SAAD;AAAW,MAAA,KAAK,EAAEA,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAFJ,CADG,CAAP;AAQH;AACJ;;AAED,eAAeX,QAAf","sourcesContent":["import EventCard from \"../comps/eventCard\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nfunction Timeline(props) {\r\n    const style = {\r\n        color: \"white\",\r\n        fontSize: 8,\r\n        lineHeight: 4\r\n    };\r\n\r\n    function fillEvents(events) {\r\n        var time = 0;\r\n        var filledEvents = [];\r\n        events.map(event => {\r\n            if (time < event.startTime) {\r\n                filledEvents.push({\r\n                    startTime: time,\r\n                    endTime: event.startTime,\r\n                    cal: null\r\n                });\r\n                filledEvents.push(event);\r\n                time = event.endTime;\r\n            } else {\r\n                filledEvents.push(event);\r\n                time = event.endTime;\r\n            }\r\n        });\r\n        return filledEvents;\r\n    }\r\n\r\n    if (event.cal !== null) {\r\n        return fillEvents(props.events).map(event => (\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={2}>\r\n                    <p style={{ color: \"white\", fontSize: 16 }}>\r\n                        {parseInt(event.startTime / 60)} :{\" \"}\r\n                        {event.startTime % 60}\r\n                    </p>\r\n                </Grid>\r\n                <Grid item xs={10}>\r\n                    <EventCard event={event} />\r\n                </Grid>\r\n            </Grid>\r\n        ));\r\n    } else {\r\n        return fillEvents(props.events).map(event => (\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={2}></Grid>\r\n                <Grid item xs={10}>\r\n                    <EventCard event={event} />\r\n                </Grid>\r\n            </Grid>\r\n        ));\r\n    }\r\n}\r\n\r\nexport default Timeline;\r\n"]},"metadata":{},"sourceType":"module"}