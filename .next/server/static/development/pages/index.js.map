{"version":3,"file":"static\\development\\pages\\index.js","sources":["webpack:///webpack/bootstrap","webpack:///./classes.js","webpack:///./comps/AllDayEvents.js","webpack:///./comps/CreateEventDialog.js","webpack:///./comps/CreateRepeatDialog.js","webpack:///./comps/DayView.js","webpack:///./comps/EditEventDialog.js","webpack:///./comps/eventCard.js","webpack:///./config.js","webpack:///./pages/index.js","webpack:///./utils/methods.js","webpack:///external \"isomorphic-unfetch\"","webpack:///external \"react\"","webpack:///external \"react-day-picker\"","webpack:///external \"react-helmet\"","webpack:///external \"react-transition-group\"","webpack:///external \"rsuite\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","import { generateUUID } from \"./utils/methods\";\r\n\r\nexport class Event {\r\n    constructor(JSONObject, isEmpty) {\r\n        this.startTime = new Date(JSONObject.startTime);\r\n        this.endTime = new Date(JSONObject.endTime);\r\n        this.duration = parseInt((this.endTime - this.startTime) / 60000);\r\n        this.location = JSONObject.location == undefined ? undefined : JSONObject.location;\r\n        this.description = JSONObject.description == undefined ? undefined : JSONObject.description;\r\n        this.id = JSONObject.id == undefined ? generateUUID() : JSONObject.id;\r\n        this.calendarTitle = JSONObject.calendarTitle == undefined ? undefined : JSONObject.calendarTitle;\r\n        this.ignore = JSONObject.ignore == undefined ? undefined : JSONObject.ignore;\r\n        this.ignoreReason = JSONObject.ignoreReason == (undefined || \"\") ? undefined : JSONObject.ignoreReason;\r\n        this.repeatID = JSONObject.repeatID == undefined ? undefined : JSONObject.repeatID;\r\n        if (!isEmpty) {\r\n            this.isEmpty = false;\r\n            this.title = JSONObject.title;\r\n            this.color = JSONObject.color;\r\n        } else this.isEmpty = true;\r\n    }\r\n\r\n    isAllDayEvent() {\r\n        return this.duration >= 1440;\r\n    }\r\n\r\n    isEmpty() {\r\n        return this.isEmpty;\r\n    }\r\n\r\n    getStartTimeSrting() {\r\n        return this.startTime.getHours() + \":\" + (this.startTime.getMinutes() < 10 ? \"0\" : \"\") + this.startTime.getMinutes();\r\n    }\r\n\r\n    getEndTimeSting() {\r\n        return this.endTime.getHours() + \":\" + (this.endTime.getMinutes() < 10 ? \"0\" : \"\") + this.endTime.getMinutes();\r\n    }\r\n\r\n    getDurationString() {\r\n        return this.getStartTimeSrting() + \" - \" + this.getEndTimeSting();\r\n    }\r\n}\r\n\r\nexport class Repeat {\r\n    constructor(JSONObject) {\r\n        this.id = JSONObject.id == undefined ? generateUUID() : JSONObject.id;\r\n        this.name = JSONObject.name;\r\n        this.startDate = new Date(JSONObject.startDate);\r\n        this.endDate = new Date(JSONObject.endDate);\r\n        this.startTime = new Date(JSONObject.startTime);\r\n        this.endTime = new Date(JSONObject.endTime);\r\n        this.cycle = JSONObject.cycle;\r\n        this.repeatData = JSONObject.repeatData;\r\n        this.generated = JSONObject.generated == undefined ? [] : JSONObject.generated;\r\n    }\r\n}\r\n\r\nexport class Calendar {\r\n    constructor(JSONObject) {\r\n        this.title = JSONObject.title;\r\n        this.color = JSONObject.color;\r\n        this.label = this.title;\r\n        this.events = JSONObject.events.map(event => {\r\n            event.calendarTitle = this.title;\r\n            return new Event(event);\r\n        });\r\n        this.repeats = JSONObject.repeats == undefined ? [] : JSONObject.repeats.map(repeat => {\r\n            repeat.calendarTitle = this.title;\r\n            return new Repeat(repeat);\r\n        });;\r\n    }\r\n}\r\n\r\nexport class User {\r\n    constructor(JSONObject) {\r\n        this.username = JSONObject.username;\r\n        this.calendars = JSONObject.calendars.map(calendar => {\r\n            return new Calendar(calendar);\r\n        });\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport EventCard from \"./eventCard\";\r\n\r\nclass AllDayEvents extends React.Component {\r\n    render() {\r\n        return this.props.events.map(event => {\r\n            return <EventCard key={event.id} height={60} event={event} openEventEditDialog={this.props.openEventEditDialog} openEventCreateDialog={this.props.openEventCreateDialog} />;\r\n        });\r\n    }\r\n}\r\n\r\nexport default AllDayEvents;\r\n","import React from \"react\";\r\n\r\nimport { FlexboxGrid, Button, Form, FormGroup, FormControl, ControlLabel, CheckboxGroup, Checkbox, SelectPicker, Modal } from \"rsuite\";\r\n\r\nclass CreateEventDialog extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        if (this.props.inputing == undefined) return null;\r\n\r\n        if (this.props.inputing.allday == undefined || !this.props.inputing.allday.includes(\"allday\"))\r\n            var time = (\r\n                <FormGroup>\r\n                    <ControlLabel>時間</ControlLabel>\r\n                    <FormControl name=\"time\" />\r\n                </FormGroup>\r\n            );\r\n        if (this.props.userdata.calendars != undefined) {\r\n            var calendarOptions = this.props.userdata.calendars.map(calendar => {\r\n                return { label: calendar.title, value: calendar };\r\n            });\r\n        }\r\n\r\n        return (\r\n            <Modal show={this.props.creatingEvent} aria-labelledby=\"form-dialog-title\" width=\"xs\">\r\n                <Modal.Header closeButton onClick={this.props.closeEventCreateDialog}>\r\n                    <h5>創建新事件</h5>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form formValue={this.props.inputing} onChange={this.props.handleFormChange}>\r\n                        <FormGroup>\r\n                            <ControlLabel>行事曆</ControlLabel>\r\n                            <FormControl name=\"calendar\" data={calendarOptions} accepter={SelectPicker} />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <ControlLabel>事件標題</ControlLabel>\r\n                            <FormControl name=\"title\" />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <ControlLabel>日期</ControlLabel>\r\n                            <FormControl name=\"date\" />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <FormControl accepter={CheckboxGroup} name=\"allday\">\r\n                                <Checkbox value=\"allday\">全天事件</Checkbox>\r\n                            </FormControl>\r\n                        </FormGroup>\r\n                        {time}\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <FlexboxGrid>\r\n                        <FlexboxGrid.Item colspan={3} style={{ textAlign: \"left\" }}>\r\n                            <Button color=\"violet\" onClick={this.props.openRepeatCreateDialog} loading={this.props.waiting}>\r\n                                創建系列\r\n                            </Button>\r\n                        </FlexboxGrid.Item>\r\n                        <FlexboxGrid.Item colspan={15} />\r\n                        <FlexboxGrid.Item colspan={6} style={{ textAlign: \"right\" }}>\r\n                            <Button onClick={this.props.closeEventCreateDialog}>取消</Button>\r\n                            <Button appearance=\"primary\" onClick={this.props.createEvent} loading={this.props.waiting}>\r\n                                創立\r\n                            </Button>\r\n                        </FlexboxGrid.Item>\r\n                    </FlexboxGrid>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CreateEventDialog;\r\n","import React from \"react\";\r\n\r\nimport { Button, Form, FormGroup, FormControl, ControlLabel, CheckboxGroup, Checkbox, SelectPicker, Modal } from \"rsuite\";\r\n\r\nclass CreateRepeatDialog extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        if (this.props.inputing == undefined || this.props.inputing.cycle == undefined) return null;\r\n\r\n        if (this.props.inputing.allday == undefined || !this.props.inputing.allday.includes(\"allday\"))\r\n            var time = (\r\n                <FormGroup>\r\n                    <ControlLabel>時間</ControlLabel>\r\n                    <FormControl name=\"time\" />\r\n                </FormGroup>\r\n            );\r\n        if (this.props.userdata.calendars != undefined) {\r\n            var calendarOptions = this.props.userdata.calendars.map(calendar => {\r\n                return { label: calendar.title, value: calendar };\r\n            });\r\n        }\r\n\r\n        var cycleOptions = [\r\n            { label: \"每周重複\", value: \"Week\" },\r\n            { label: \"每月重複\", value: \"Month\" }\r\n        ];\r\n\r\n        var repeatData = null;\r\n        if (this.props.inputing.cycle == \"Week\") {\r\n            repeatData = (\r\n                <FormGroup>\r\n                    <ControlLabel>星期幾</ControlLabel>\r\n                    <FormControl name=\"repeatData\" />\r\n                </FormGroup>\r\n            );\r\n        } else if (this.props.inputing.cycle == \"Month\") {\r\n            repeatData = (\r\n                <FormGroup>\r\n                    <ControlLabel>每月幾號</ControlLabel>\r\n                    <FormControl name=\"repeatData\" />\r\n                </FormGroup>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Modal show={this.props.creatingRepeat} aria-labelledby=\"form-dialog-title\" width=\"xs\">\r\n                <Modal.Header closeButton onClick={this.props.closeRepeatCreateDialog}>\r\n                    <h5>創建新系列</h5>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form formValue={this.props.inputing} onChange={this.props.handleFormChange}>\r\n                        <FormGroup>\r\n                            <ControlLabel>行事曆</ControlLabel>\r\n                            <FormControl name=\"calendar\" data={calendarOptions} accepter={SelectPicker} />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <ControlLabel>系列名稱</ControlLabel>\r\n                            <FormControl name=\"title\" />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <ControlLabel>起始日期</ControlLabel>\r\n                            <FormControl name=\"startDate\" />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <ControlLabel>結束日期</ControlLabel>\r\n                            <FormControl name=\"endDate\" />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <ControlLabel>循環週期</ControlLabel>\r\n                            <FormControl name=\"cycle\" data={cycleOptions} accepter={SelectPicker} />\r\n                        </FormGroup>\r\n                        {repeatData}\r\n                        <FormGroup>\r\n                            <FormControl accepter={CheckboxGroup} name=\"allday\">\r\n                                <Checkbox value=\"allday\">全天事件</Checkbox>\r\n                            </FormControl>\r\n                        </FormGroup>\r\n                        {time}\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={this.props.closeRepeatCreateDialog}>取消</Button>\r\n                    <Button appearance=\"primary\" onClick={this.props.createRepeat} loading={this.props.waiting}>\r\n                        創立\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CreateRepeatDialog;\r\n","import React from \"react\";\r\nimport EventCard from \"./eventCard\";\r\nimport { FlexboxGrid } from \"rsuite\";\r\nimport { Event } from \"../classes\";\r\n\r\nclass DayView extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.clickHandler = this.clickHandler.bind(this);\r\n    }\r\n\r\n    clickHandler = () => {\r\n        this.props.openEventEditDialog(this.props.event);\r\n    };\r\n\r\n    render() {\r\n        return this.props.events.map(event => {\r\n            event = new Event(event, event.isEmpty);\r\n            return (\r\n                <FlexboxGrid key={event.id} spacing={1}>\r\n                    <FlexboxGrid.Item colspan={4}>\r\n                        <p style={{ color: \"white\", fontSize: 8 }}>{event.isEmpty ? \"\" : event.getStartTimeSrting()}</p>\r\n                    </FlexboxGrid.Item>\r\n                    <FlexboxGrid.Item colspan={20}>\r\n                        <EventCard\r\n                            event={event}\r\n                            openEventEditDialog={this.props.openEventEditDialog}\r\n                            openEventCreateDialog={this.props.openEventCreateDialog}\r\n                        />\r\n                    </FlexboxGrid.Item>\r\n                </FlexboxGrid>\r\n            );\r\n        });\r\n    }\r\n}\r\n\r\nexport default DayView;\r\n","import React from \"react\";\r\nimport { Button, FlexboxGrid, Form, FormGroup, FormControl, ControlLabel, CheckboxGroup, Checkbox, Modal, Avatar } from \"rsuite\";\r\n\r\nclass EditEventDialog extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        if (this.props.inputing == undefined) return null;\r\n\r\n        if (this.props.inputing.ignore != undefined)\r\n            var ignoreReason = this.props.inputing.ignore.includes(\"ignore\") ? (\r\n                <FormGroup>\r\n                    <ControlLabel>忽略原因</ControlLabel>\r\n                    <FormControl name=\"ignoreReason\" />\r\n                </FormGroup>\r\n            ) : null;\r\n        if (this.props.inputing.allday == undefined || !this.props.inputing.allday.includes(\"allday\"))\r\n            var time = (\r\n                <FormGroup>\r\n                    <ControlLabel>時間</ControlLabel>\r\n                    <FormControl name=\"time\" />\r\n                </FormGroup>\r\n            );\r\n        return (\r\n            <Modal show={this.props.editingEvent} aria-labelledby=\"form-dialog-title\" width=\"xs\">\r\n                <Modal.Header closeButton onClick={this.props.closeEventEditDialog}>\r\n                    <Avatar\r\n                        style={{\r\n                            backgroundImage:\r\n                                \"linear-gradient(315deg, \" + this.props.selectedEvent.color[0] + \" 0%, \" + this.props.selectedEvent.color[1] + \" 100%)\",\r\n                            color: \"#ffffff\"\r\n                        }}\r\n                    >\r\n                        {this.props.selectedEvent.calendarTitle.charAt(0)}\r\n                    </Avatar>{\" \"}\r\n                    <h5 style={{ marginLeft: 6, display: \"inline-block\" }}>{this.props.selectedEvent.calendarTitle}</h5>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form formValue={this.props.inputing} onChange={this.props.handleFormChange}>\r\n                        <FormGroup>\r\n                            <ControlLabel>事件標題</ControlLabel>\r\n                            <FormControl name=\"title\" />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <ControlLabel>日期</ControlLabel>\r\n                            <FormControl name=\"date\" />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <FormControl accepter={CheckboxGroup} name=\"allday\">\r\n                                <Checkbox value=\"allday\">全天事件</Checkbox>\r\n                            </FormControl>\r\n                        </FormGroup>\r\n                        {time}\r\n                        <FormGroup>\r\n                            <FormControl accepter={CheckboxGroup} name=\"ignore\">\r\n                                <Checkbox value=\"ignore\">忽略該事項</Checkbox>\r\n                            </FormControl>\r\n                        </FormGroup>\r\n                        {ignoreReason}\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <FlexboxGrid>\r\n                        <FlexboxGrid.Item colspan={3} style={{ textAlign: \"left\" }}>\r\n                            <Button color=\"red\" onClick={this.props.removeEvent} loading={this.props.removing}>\r\n                                刪除\r\n                            </Button>\r\n                        </FlexboxGrid.Item>\r\n                        <FlexboxGrid.Item colspan={15} />\r\n                        <FlexboxGrid.Item colspan={6} style={{ textAlign: \"right\" }}>\r\n                            <Button onClick={this.props.closeEventEditDialog}>取消</Button>\r\n                            <Button appearance=\"primary\" onClick={this.props.updateEvent} loading={this.props.waiting}>\r\n                                更新\r\n                            </Button>\r\n                        </FlexboxGrid.Item>\r\n                    </FlexboxGrid>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditEventDialog;\r\n","import React from \"react\";\r\nimport { Event } from \"../classes\";\r\n\r\nimport { Whisper, Popover, Panel } from \"rsuite\";\r\n\r\nclass EventCard extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            elevation: 0\r\n        };\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.handleEmptyCardClick = this.handleEmptyCardClick.bind(this);\r\n    }\r\n\r\n    handleClick() {\r\n        this.props.openEventEditDialog(this.props.event);\r\n    }\r\n\r\n    handleEmptyCardClick() {\r\n        this.props.openEventCreateDialog(this.props.event);\r\n    }\r\n\r\n    emptyCard(startTime, endTime) {\r\n        endTime = endTime;\r\n        startTime = startTime;\r\n        const duration = (endTime - startTime) / 60000;\r\n        var cardStyle = {\r\n            height: duration,\r\n            backgroundColor: \"transparent\",\r\n            borderBottomStyle: endTime.getMinutes() == 0 ? \"solid\" : \"none\",\r\n            borderBottomColor: \"#2F3136\",\r\n            borderBottomWidth: 2,\r\n            borderTopStyle: startTime.getMinutes() == 0 ? \"solid\" : \"none\",\r\n            borderTopColor: \"#2F3136\",\r\n            borderTopWidth: 2\r\n        };\r\n        return <div style={cardStyle} key={startTime.getTime()} onClick={this.handleEmptyCardClick} />;\r\n    }\r\n\r\n    EmptySections(start, end) {\r\n        if (end.getHours() < start.getHours()) {\r\n            end.setHours(23, 59, 59);\r\n        }\r\n        var arr = new Array(end.getHours() - start.getHours() + 1);\r\n        if (start.getHours() == end.getHours()) {\r\n            arr[0] = this.emptyCard(start, end);\r\n        } else if (start.getHours() + 1 == end.getHours()) {\r\n            var a = new Date(end);\r\n            a.setMinutes(0);\r\n            arr[0] = this.emptyCard(start, a);\r\n            arr[1] = this.emptyCard(a, end);\r\n        } else {\r\n            var a = new Date(start);\r\n            a.setHours(start.getHours() + 1, 0);\r\n            arr[0] = this.emptyCard(start, a);\r\n            for (var i = start.getHours() + 1, j = 1; i < end.getHours(); i++, j++) {\r\n                var a = new Date(start);\r\n                a.setHours(i, 0);\r\n                var b = new Date(start);\r\n                b.setHours(i + 1, 0);\r\n                arr[j] = this.emptyCard(a, b);\r\n            }\r\n            var a = new Date(end);\r\n            a.setMinutes(0);\r\n            arr[end.getHours() - start.getHours()] = this.emptyCard(a, end);\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    render() {\r\n        if (this.props.event instanceof Event) {\r\n            if (this.props.event.isEmpty) {\r\n                return this.EmptySections(this.props.event.startTime, this.props.event.endTime).map(emptyCard => {\r\n                    return emptyCard;\r\n                });\r\n            } else {\r\n                const style = {\r\n                    height: this.props.height != undefined ? this.props.height : this.props.event.duration,\r\n                    backgroundImage: \"linear-gradient(315deg, \" + this.props.event.color[0] + \" 0%, \" + this.props.event.color[1] + \" 100%)\",\r\n                    fontSize: 8,\r\n                    paddingLeft: 16,\r\n                    paddingTop: 10,\r\n                    marginTop: this.props.height != undefined ? 15 : 0,\r\n                    paddingBottom: 6,\r\n                    opacity: this.props.event.ignore ? 0.2 : 1\r\n                };\r\n\r\n                /** compose event info of card */\r\n                var lineAmount =\r\n                    this.props.height != undefined\r\n                        ? parseInt(this.props.height / 20) > 1\r\n                            ? parseInt(this.props.height / 20) - 1\r\n                            : 1\r\n                        : parseInt(this.props.event.duration / 20) > 1\r\n                        ? parseInt(this.props.event.duration / 20) - 1\r\n                        : 1;\r\n                var eventInfo = [];\r\n                eventInfo.push(\r\n                    this.props.event.isAllDayEvent() ? (\r\n                        <p key=\"title\" style={{ color: \"white\" }}>\r\n                            {this.props.event.title}{\" \"}\r\n                        </p>\r\n                    ) : (\r\n                        <p key=\"title\" style={{ color: \"white\" }}>\r\n                            {this.props.event.title}{\" \"}\r\n                            <strong style={{ marginLeft: 16, color: \"rgba(255,255,255,0.4)\" }}>{this.props.event.getDurationString()}</strong>\r\n                        </p>\r\n                    )\r\n                );\r\n                if (!this.props.event.isAllDayEvent())\r\n                    eventInfo.push(\r\n                        <p style={{ color: \"rgba(255,255,255,0.8)\" }} key=\"duration\">\r\n                            {this.props.event.duration} 分鐘\r\n                        </p>\r\n                    );\r\n                eventInfo.push(\r\n                    <p style={{ color: \"rgba(255,255,255,0.8)\" }} key=\"cal\">\r\n                        {this.props.event.calendarTitle}\r\n                    </p>\r\n                );\r\n                if (this.props.event.ignore == true)\r\n                    return (\r\n                        <Whisper\r\n                            placement=\"right\"\r\n                            delayHide={0}\r\n                            trigger=\"hover\"\r\n                            speaker={<Popover>該事件已被忽略，原因為{this.props.event.ignoreReason}</Popover>}\r\n                        >\r\n                            <Panel style={style} onClick={this.handleClick} key={this.props.event.id} bodyFill>\r\n                                {eventInfo.slice(0, lineAmount).map(info => {\r\n                                    return info;\r\n                                })}\r\n                            </Panel>\r\n                        </Whisper>\r\n                    );\r\n                else {\r\n                    return (\r\n                        <Panel style={style} onClick={this.handleClick} key={this.props.event.id} bodyFill>\r\n                            {eventInfo.slice(0, lineAmount).map(info => {\r\n                                return info;\r\n                            })}\r\n                        </Panel>\r\n                    );\r\n                }\r\n            }\r\n        } else {\r\n            console.error(\"渲染事件卡片時接收到了不符合規範的 Event 物件。\");\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nexport default EventCard;\r\n","/** 後端位置 */\r\n// export const backendURL = \"https://calendar-ten.now.sh\";\r\nexport const backendURL = \"http://localhost:3000\";\r\n\r\n/** 動畫參數 */\r\nexport const duration = 600;\r\nexport const defaultStyle = {\r\n    transition: `opacity ${duration}ms ease-in-out`,\r\n    opacity: 0\r\n};\r\nexport const transitionStyles = {\r\n    entering: { opacity: 1 },\r\n    entered: { opacity: 1 },\r\n    exiting: { opacity: 0 },\r\n    exited: { opacity: 0 }\r\n};","import React from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport DayPicker from \"react-day-picker\";\r\nimport fetch from \"isomorphic-unfetch\";\r\nimport { Transition } from \"react-transition-group\";\r\n\r\nimport DayView from \"../comps/DayView\";\r\nimport AllDayEvents from \"../comps/AllDayEvents\";\r\nimport EditEventDialog from \"../comps/EditEventDialog\";\r\nimport CreateEventDialog from \"../comps/CreateEventDialog\";\r\nimport CreateRepeatDialog from \"../comps/CreateRepeatDialog\";\r\nimport { User, Event, Repeat } from \"../classes\";\r\nimport { backendURL, duration, defaultStyle, transitionStyles } from \"../config\";\r\nimport { getDayDescription, displayError, eventsToDispay, allDayEventsToDispay, fillEvents, buildRepeatToEvent } from \"../utils/methods\";\r\n\r\nimport { Loader, Panel, Container, FlexboxGrid, Col } from \"rsuite\";\r\n\r\nimport \"rsuite/lib/styles/themes/dark/index.less\";\r\nimport \"../style.less\";\r\n\r\nclass index extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loaded: false,\r\n            waiting: false,\r\n            removing: false,\r\n            selectedDay: new Date(),\r\n            eventsToDispay: [],\r\n            userdata: {},\r\n            filled: [],\r\n            editingEvent: false,\r\n            creatingEvent: false,\r\n            selectedEvent: new Event({\r\n                title: \"選中的事件\",\r\n                startTime: new Date(),\r\n                endTime: new Date(),\r\n                color: [\"#fd3721\", \"#b721ff\"],\r\n                calendarTitle: \"哈\"\r\n            })\r\n        };\r\n        this.handleDayClick = this.handleDayClick.bind(this);\r\n        this.openEventEditDialog = this.openEventEditDialog.bind(this);\r\n        this.closeEventEditDialog = this.closeEventEditDialog.bind(this);\r\n        this.openEventCreateDialog = this.openEventCreateDialog.bind(this);\r\n        this.closeEventCreateDialog = this.closeEventCreateDialog.bind(this);\r\n        this.openRepeatCreateDialog = this.openRepeatCreateDialog.bind(this);\r\n        this.closeRepeatCreateDialog = this.closeRepeatCreateDialog.bind(this);\r\n        this.updateEvent = this.updateEvent.bind(this);\r\n        this.createEvent = this.createEvent.bind(this);\r\n        this.createRepeat = this.createRepeat.bind(this);\r\n        this.removeEvent = this.removeEvent.bind(this);\r\n        this.handleFormChange = this.handleFormChange.bind(this);\r\n    }\r\n\r\n    async handleDayClick(day, { selected }) {\r\n        var newdata = buildRepeatToEvent(this.state.userdata, day);\r\n        fetch(backendURL + \"/api/updateuserdata\", { method: \"post\", body: JSON.stringify({ calendars: newdata.calendars }) });\r\n        this.setState({\r\n            selectedDay: selected ? new Date() : day,\r\n            userdata: newdata\r\n        });\r\n    }\r\n\r\n    static async getInitialProps() {\r\n        try {\r\n            const res = await fetch(backendURL + \"/api/getuserdata\");\r\n            const json = await res.json();\r\n            var userdata = new User(json);\r\n            var etd = eventsToDispay(userdata.calendars, new Date());\r\n            var filled = fillEvents(eventsToDispay(userdata.calendars, new Date()), new Date());\r\n        } catch (err) {\r\n            displayError(\"發生錯誤 T_T\", err);\r\n        }\r\n        return { userdata: userdata, filled: filled, eventsToDispay: etd };\r\n    }\r\n\r\n    componentDidMount() {\r\n        setTimeout(() => {\r\n            var filled = fillEvents(this.props.eventsToDispay, new Date());\r\n            this.setState({ filled: filled, userdata: this.props.userdata, loaded: true });\r\n        }, 200);\r\n    }\r\n\r\n    openEventEditDialog(event) {\r\n        this.setState({\r\n            selectedEvent: event,\r\n            editingEvent: true,\r\n            inputing: {\r\n                title: event.title,\r\n                date: event.startTime.getFullYear() + \"/\" + (event.startTime.getMonth() + 1) + \"/\" + event.startTime.getDate(),\r\n                time: event.startTime.getHours() + \":\" + event.startTime.getMinutes() + \"~\" + event.endTime.getHours() + \":\" + event.endTime.getMinutes(),\r\n                ignore: [event.ignore ? \"ignore\" : null],\r\n                ignoreReason: event.ignoreReason == undefined ? \"\" : event.ignoreReason,\r\n                allday: [event.isAllDayEvent() ? \"allday\" : null]\r\n            }\r\n        });\r\n    }\r\n\r\n    closeEventEditDialog() {\r\n        this.setState({ editingEvent: false });\r\n    }\r\n\r\n    openEventCreateDialog() {\r\n        this.setState({\r\n            creatingEvent: true,\r\n            inputing: {\r\n                title: \"\",\r\n                date: this.state.selectedDay.getFullYear() + \"/\" + (this.state.selectedDay.getMonth() + 1) + \"/\" + this.state.selectedDay.getDate(),\r\n                time: new Date().getHours() + \":\" + new Date().getMinutes() + \"~\" + (new Date().getHours() + 1) + \":\" + new Date().getMinutes(),\r\n                calendar: { label: this.state.userdata.calendars[0].title, value: this.state.userdata.calendars[0] },\r\n                allday: [null]\r\n            }\r\n        });\r\n    }\r\n\r\n    openRepeatCreateDialog() {\r\n        this.setState({\r\n            creatingEvent: false,\r\n            creatingRepeat: true,\r\n            inputing: {\r\n                title: \"\",\r\n                startdate: this.state.selectedDay.getFullYear() + \"/\" + (this.state.selectedDay.getMonth() + 1) + \"/\" + this.state.selectedDay.getDate(),\r\n                enddate: this.state.selectedDay.getFullYear() + \"/\" + (this.state.selectedDay.getMonth() + 1) + \"/\" + this.state.selectedDay.getDate(),\r\n                cycle: \"Week\",\r\n                repeatData: \"\",\r\n                time: new Date().getHours() + \":\" + new Date().getMinutes() + \"~\" + (new Date().getHours() + 1) + \":\" + new Date().getMinutes(),\r\n                calendar: { label: this.state.userdata.calendars[0].title, value: this.state.userdata.calendars[0] },\r\n                allday: [null]\r\n            }\r\n        });\r\n    }\r\n\r\n    closeRepeatCreateDialog() {\r\n        this.setState({ creatingRepeat: false });\r\n    }\r\n\r\n    closeEventCreateDialog() {\r\n        this.setState({ creatingEvent: false });\r\n    }\r\n\r\n    async createEvent() {\r\n        this.setState({\r\n            waiting: true\r\n        });\r\n        var newStartTime = new Date();\r\n        var newEndTime = new Date();\r\n        newStartTime.setFullYear(this.state.inputing.date.split(\"/\")[0], this.state.inputing.date.split(\"/\")[1] - 1, this.state.inputing.date.split(\"/\")[2]);\r\n        newEndTime.setFullYear(this.state.inputing.date.split(\"/\")[0], this.state.inputing.date.split(\"/\")[1] - 1, this.state.inputing.date.split(\"/\")[2]);\r\n        if (this.state.inputing.allday.includes(\"allday\")) {\r\n            newStartTime.setHours(0, 0);\r\n            newEndTime.setHours(24, 0);\r\n        } else {\r\n            newStartTime.setHours(this.state.inputing.time.split(\"~\")[0].split(\":\")[0], this.state.inputing.time.split(\"~\")[0].split(\":\")[1]);\r\n            newEndTime.setHours(this.state.inputing.time.split(\"~\")[1].split(\":\")[0], this.state.inputing.time.split(\"~\")[1].split(\":\")[1]);\r\n        }\r\n        var newdata = new User(this.state.userdata);\r\n        newdata.calendars.map(calendar => {\r\n            if (calendar.title == this.state.inputing.calendar.label) {\r\n                calendar.events.push(new Event({ title: this.state.inputing.title, startTime: newStartTime, endTime: newEndTime, color: calendar.color }));\r\n            }\r\n        });\r\n\r\n        // 更新視圖\r\n        var etd = eventsToDispay(newdata.calendars, new Date());\r\n        var filled = fillEvents(eventsToDispay(newdata.calendars, new Date()), new Date());\r\n        this.setState({ userdata: newdata, filled: filled, eventsToDispay: etd, waiting: false, creatingEvent: false });\r\n\r\n        // 上傳更新到資料庫\r\n        var res = null;\r\n        try {\r\n            res = await fetch(backendURL + \"/api/updateuserdata\", { method: \"post\", body: JSON.stringify({ calendars: newdata.calendars }) });\r\n        } catch (err) {\r\n            displayError(\"對不起 ... 發生技術性問題啦 T_T\", \"創建新事件時發生了一些問題，希望你可以與我們聯絡來幫助我們改進 !\");\r\n        } finally {\r\n            if (res.status != 200) displayError(\"對不起 ... 發生技術性問題啦 T_T\", \"創建新事件時發生了一些問題，希望你可以與我們聯絡來幫助我們改進 !\");\r\n        }\r\n    }\r\n\r\n    async createRepeat() {\r\n        this.setState({\r\n            waiting: true\r\n        });\r\n        var startDate = new Date();\r\n        var endDate = new Date();\r\n        startDate.setFullYear(\r\n            this.state.inputing.startDate.split(\"/\")[0],\r\n            this.state.inputing.startDate.split(\"/\")[1] - 1,\r\n            this.state.inputing.startDate.split(\"/\")[2]\r\n        );\r\n        endDate.setFullYear(\r\n            this.state.inputing.endDate.split(\"/\")[0],\r\n            this.state.inputing.endDate.split(\"/\")[1] - 1,\r\n            this.state.inputing.endDate.split(\"/\")[2]\r\n        );\r\n        var newStartTime = new Date();\r\n        var newEndTime = new Date();\r\n        newStartTime.setFullYear(\r\n            this.state.inputing.startDate.split(\"/\")[0],\r\n            this.state.inputing.startDate.split(\"/\")[1] - 1,\r\n            this.state.inputing.startDate.split(\"/\")[2]\r\n        );\r\n        newEndTime.setFullYear(\r\n            this.state.inputing.startDate.split(\"/\")[0],\r\n            this.state.inputing.startDate.split(\"/\")[1] - 1,\r\n            this.state.inputing.startDate.split(\"/\")[2]\r\n        );\r\n        if (this.state.inputing.allday.includes(\"allday\")) {\r\n            newStartTime.setHours(0, 0);\r\n            newEndTime.setHours(24, 0);\r\n        } else {\r\n            newStartTime.setHours(this.state.inputing.time.split(\"~\")[0].split(\":\")[0], this.state.inputing.time.split(\"~\")[0].split(\":\")[1]);\r\n            newEndTime.setHours(this.state.inputing.time.split(\"~\")[1].split(\":\")[0], this.state.inputing.time.split(\"~\")[1].split(\":\")[1]);\r\n        }\r\n        var newdata = new User(this.state.userdata);\r\n        newdata.calendars.map(calendar => {\r\n            if (calendar.title == this.state.inputing.calendar.label) {\r\n                calendar.repeats.push(\r\n                    new Repeat({\r\n                        name: this.state.inputing.title,\r\n                        startDate: startDate,\r\n                        endDate: endDate,\r\n                        startTime: newStartTime,\r\n                        endTime: newEndTime,\r\n                        cycle: this.state.inputing.cycle,\r\n                        repeatData: this.state.inputing.repeatData\r\n                    })\r\n                );\r\n            }\r\n        });\r\n\r\n        // 更新視圖\r\n        var etd = eventsToDispay(newdata.calendars, new Date());\r\n        var filled = fillEvents(eventsToDispay(newdata.calendars, new Date()), new Date());\r\n        this.setState({ userdata: newdata, filled: filled, eventsToDispay: etd, waiting: false, creatingRepeat: false });\r\n\r\n        // 上傳變更到數據庫\r\n        var res = null;\r\n        try {\r\n            res = await fetch(backendURL + \"/api/updateuserdata\", { method: \"post\", body: JSON.stringify({ calendars: newdata.calendars }) });\r\n        } catch (err) {\r\n            displayError(\"對不起 ... 發生技術性問題啦 T_T\", \"創建新系列時發生了一些問題，希望你可以與我們聯絡來幫助我們改進 !\");\r\n        } finally {\r\n            if (res.status != 200) displayError(\"對不起 ... 發生技術性問題啦 T_T\", \"創建新系列時發生了一些問題，希望你可以與我們聯絡來幫助我們改進 !\");\r\n        }\r\n    }\r\n\r\n    async updateEvent() {\r\n        this.setState({\r\n            waiting: true\r\n        });\r\n        var newStartTime = new Date();\r\n        var newEndTime = new Date();\r\n        newStartTime.setFullYear(this.state.inputing.date.split(\"/\")[0], this.state.inputing.date.split(\"/\")[1] - 1, this.state.inputing.date.split(\"/\")[2]);\r\n        newEndTime.setFullYear(this.state.inputing.date.split(\"/\")[0], this.state.inputing.date.split(\"/\")[1] - 1, this.state.inputing.date.split(\"/\")[2]);\r\n        if (this.state.inputing.allday.includes(\"allday\")) {\r\n            newStartTime.setHours(0, 0);\r\n            newEndTime.setHours(24, 0);\r\n        } else {\r\n            newStartTime.setHours(this.state.inputing.time.split(\"~\")[0].split(\":\")[0], this.state.inputing.time.split(\"~\")[0].split(\":\")[1]);\r\n            newEndTime.setHours(this.state.inputing.time.split(\"~\")[1].split(\":\")[0], this.state.inputing.time.split(\"~\")[1].split(\":\")[1]);\r\n        }\r\n        var newdata = new User(this.state.userdata);\r\n        newdata.calendars.map(calendar => {\r\n            calendar.events.map(event => {\r\n                if (event.id == this.state.selectedEvent.id) {\r\n                    event.startTime = newStartTime;\r\n                    event.endTime = newEndTime;\r\n                    event.title = this.state.inputing.title;\r\n                    event.ignore = this.state.inputing.ignore.includes(\"ignore\") ? true : false;\r\n                    event.ignoreReason = this.state.inputing.ignoreReason;\r\n                }\r\n            });\r\n        });\r\n\r\n        // 更新視圖\r\n        var etd = eventsToDispay(newdata.calendars, new Date());\r\n        var filled = fillEvents(eventsToDispay(newdata.calendars, new Date()), new Date());\r\n        this.setState({ userdata: newdata, filled: filled, eventsToDispay: etd, waiting: false, editingEvent: false });\r\n\r\n        // 上傳變更到資料庫\r\n        var res = null;\r\n        try {\r\n            res = await fetch(backendURL + \"/api/updateuserdata\", { method: \"post\", body: JSON.stringify({ calendars: newdata.calendars }) });\r\n        } catch (err) {\r\n            displayError(\"對不起 ... 發生技術性問題啦 T_T\", \"更新事件時發生了一些問題，希望你可以與我們聯絡來幫助我們改進 !\");\r\n        } finally {\r\n            if (res.status != 200) displayError(\"對不起 ... 發生技術性問題啦 T_T\", \"更新事件時發生了一些問題，希望你可以與我們聯絡來幫助我們改進 !\");\r\n        }\r\n    }\r\n\r\n    async removeEvent() {\r\n        this.setState({\r\n            removing: true\r\n        });\r\n        var newdata = new User(this.state.userdata);\r\n        newdata.calendars.map(calendar => {\r\n            var targetEvent = null;\r\n            calendar.events.map(event => {\r\n                if (event.id == this.state.selectedEvent.id) {\r\n                    targetEvent = event;\r\n                }\r\n            });\r\n            if (targetEvent != null) calendar.events.splice(calendar.events.indexOf(targetEvent), 1);\r\n        });\r\n\r\n        // 更新視圖\r\n        var etd = eventsToDispay(newdata.calendars, new Date());\r\n        var filled = fillEvents(eventsToDispay(newdata.calendars, new Date()), new Date());\r\n        this.setState({ userdata: newdata, filled: filled, eventsToDispay: etd, removing: false, editingEvent: false });\r\n\r\n        // 上傳變更到資料庫\r\n        var res = null;\r\n        try {\r\n            res = await fetch(backendURL + \"/api/updateuserdata\", { method: \"post\", body: JSON.stringify({ calendars: newdata.calendars }) });\r\n        } catch (err) {\r\n            displayError(\"對不起 ... 發生技術性問題啦 T_T\", \"刪除事件時發生了一些問題，希望你可以與我們聯絡來幫助我們改進 !\");\r\n        } finally {\r\n            if (res.status != 200) displayError(\"對不起 ... 發生技術性問題啦 T_T\", \"刪除事件時發生了一些問題，希望你可以與我們聯絡來幫助我們改進 !\");\r\n        }\r\n    }\r\n\r\n    handleFormChange(value) {\r\n        this.setState({\r\n            inputing: {\r\n                ignoreReason: value.ignoreReason,\r\n                ignore: value.ignore,\r\n                calendar: value.calendar,\r\n                cycle: value.cycle,\r\n                repeatData: value.repeatData,\r\n                time: value.time,\r\n                date: value.date,\r\n                title: value.title,\r\n                allday: value.allday,\r\n                startDate: value.startDate,\r\n                endDate: value.endDate\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        var DayviewContent = <Loader />;\r\n        var AllDayEventsContent = <Loader />;\r\n        if (this.state.userdata.calendars != undefined) {\r\n            var filled = fillEvents(eventsToDispay(this.state.userdata.calendars, this.state.selectedDay), this.state.selectedDay);\r\n            var allDayEvents = allDayEventsToDispay(this.state.userdata.calendars, this.state.selectedDay);\r\n            DayviewContent = <DayView events={filled} openEventEditDialog={this.openEventEditDialog} openEventCreateDialog={this.openEventCreateDialog} />;\r\n            AllDayEventsContent = (\r\n                <AllDayEvents events={allDayEvents} openEventEditDialog={this.openEventEditDialog} openEventCreateDialog={this.openEventCreateDialog} />\r\n            );\r\n        }\r\n\r\n        var dayDescription = getDayDescription(this.state.selectedDay);\r\n\r\n        return (\r\n            <Container>\r\n                <Helmet>\r\n                    <title>Reacal : 專注於使用者體驗的日程規劃工具</title>\r\n                </Helmet>\r\n\r\n                <FlexboxGrid justify=\"center\">\r\n                    <FlexboxGrid.Item componentClass={Col} colspan={24} xs={20} sm={18} md={12}>\r\n                        <FlexboxGrid justify=\"space-around\">\r\n                            <FlexboxGrid.Item colspan={7}>\r\n                                <div className=\"app-title\">\r\n                                    <h1>Reacal</h1>\r\n                                    <p>專注於使用者體驗的日程規劃工具</p>\r\n                                </div>\r\n                                <div className=\"day-picker-panel\">\r\n                                    <DayPicker selectedDays={this.state.selectedDay} onDayClick={this.handleDayClick} />\r\n                                </div>\r\n                                <div className=\"day-info\">\r\n                                    <h3>\r\n                                        {this.state.selectedDay.getFullYear()} / {this.state.selectedDay.getMonth() + 1} / {this.state.selectedDay.getDate()}\r\n                                    </h3>\r\n                                    <p>{dayDescription}</p>\r\n                                </div>\r\n                                <div className=\"day-view-panel\">\r\n                                    <div className=\"day-view-scroll\">\r\n                                        <Transition in={this.state.loaded} timeout={duration}>\r\n                                            {state => (\r\n                                                <div\r\n                                                    style={{\r\n                                                        ...defaultStyle,\r\n                                                        ...transitionStyles[state]\r\n                                                    }}\r\n                                                >\r\n                                                    {AllDayEventsContent}\r\n                                                </div>\r\n                                            )}\r\n                                        </Transition>\r\n                                    </div>\r\n                                </div>\r\n                            </FlexboxGrid.Item>\r\n                            <FlexboxGrid.Item colspan={14}>\r\n                                <Panel style={{ marginLeft: 60 }} bodyFill>\r\n                                    <div\r\n                                        style={{\r\n                                            overflowY: \"scroll\",\r\n                                            maxHeight: \"100vh\",\r\n                                            padding: 48\r\n                                        }}\r\n                                    >\r\n                                        <Transition in={this.state.loaded} timeout={duration}>\r\n                                            {state => (\r\n                                                <div\r\n                                                    style={{\r\n                                                        ...defaultStyle,\r\n                                                        ...transitionStyles[state]\r\n                                                    }}\r\n                                                >\r\n                                                    {DayviewContent}\r\n                                                </div>\r\n                                            )}\r\n                                        </Transition>\r\n                                    </div>\r\n                                </Panel>\r\n                            </FlexboxGrid.Item>\r\n                        </FlexboxGrid>\r\n                    </FlexboxGrid.Item>\r\n                </FlexboxGrid>\r\n\r\n                <EditEventDialog\r\n                    editingEvent={this.state.editingEvent}\r\n                    closeEventEditDialog={this.closeEventEditDialog}\r\n                    selectedEvent={this.state.selectedEvent}\r\n                    inputing={this.state.inputing}\r\n                    handleFormChange={this.handleFormChange}\r\n                    removeEvent={this.removeEvent}\r\n                    removing={this.state.removing}\r\n                    updateEvent={this.updateEvent}\r\n                    waiting={this.state.waiting}\r\n                />\r\n\r\n                <CreateEventDialog\r\n                    userdata={this.state.userdata}\r\n                    creatingEvent={this.state.creatingEvent}\r\n                    closeEventCreateDialog={this.closeEventCreateDialog}\r\n                    inputing={this.state.inputing}\r\n                    handleFormChange={this.handleFormChange}\r\n                    createEvent={this.createEvent}\r\n                    waiting={this.state.waiting}\r\n                    openRepeatCreateDialog={this.openRepeatCreateDialog}\r\n                />\r\n\r\n                <CreateRepeatDialog\r\n                    userdata={this.state.userdata}\r\n                    creatingRepeat={this.state.creatingRepeat}\r\n                    closeRepeatCreateDialog={this.closeRepeatCreateDialog}\r\n                    inputing={this.state.inputing}\r\n                    handleFormChange={this.handleFormChange}\r\n                    createRepeat={this.createRepeat}\r\n                    waiting={this.state.waiting}\r\n                />\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default index;\r\n","import { Notification } from \"rsuite\";\r\nimport { Event, Calendar, Repeat, User } from \"../classes\";\r\n\r\n/** 產生一組 UUID 給任意物件使用 */\r\nexport function generateUUID() {\r\n    var d = Date.now();\r\n    if (typeof performance !== \"undefined\" && typeof performance.now === \"function\") {\r\n        d += performance.now();\r\n    }\r\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\r\n        var r = (d + Math.random() * 16) % 16 | 0;\r\n        d = Math.floor(d / 16);\r\n        return (c === \"x\" ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n}\r\n\r\n/** 將時間物件和今天日期比對來返回中文的時間敘述 */\r\nexport function getDayDescription(date) {\r\n    var dayDescription = \"\";\r\n    var DayA = new Date(date);\r\n    var DayB = new Date();\r\n    DayA.setHours(12, 0, 0);\r\n    DayB.setHours(12, 0, 0);\r\n    if (parseInt((DayA - DayB) / 3600000) < 0) {\r\n        if (parseInt((DayA - DayB) / 3600000) == 0) dayDescription = \"今天\";\r\n        else if (parseInt((DayA - DayB) / 3600000) == -24) dayDescription = \"昨天\";\r\n        else if (parseInt((DayA - DayB) / 3600000) == -48) dayDescription = \"前天\";\r\n        else dayDescription = parseInt((DayA - DayB) / 3600000 / -24) + \" 天前\";\r\n    } else {\r\n        if (parseInt((DayA - DayB) / 3600000) == 0) dayDescription = \"今天\";\r\n        else if (parseInt((DayA - DayB) / 3600000) == 23) dayDescription = \"明天\";\r\n        else if (parseInt((DayA - DayB) / 3600000) == 47) dayDescription = \"後天\";\r\n        else dayDescription = parseInt((DayA - DayB) / 3600000 / 24) + 1 + \" 天後\";\r\n    }\r\n    return dayDescription;\r\n}\r\n\r\n/** 顯示錯誤訊息 */\r\nexport function displayError(title, message) {\r\n    Notification[\"error\"]({\r\n        title: title,\r\n        description: message\r\n    });\r\n}\r\n\r\n/** 返回特定日期的 0 點 0 分 */\r\nexport function startOfDay(date) {\r\n    date = new Date(date);\r\n    var time = new Date();\r\n    time.setTime(date.getTime());\r\n    time.setHours(0, 0, 0);\r\n    return time;\r\n}\r\n\r\n/** 返回特定日期的 23 點 59 分 */\r\nexport function endOfDay(date) {\r\n    date = new Date(date);\r\n    var time = new Date();\r\n    time.setTime(date.getTime());\r\n    time.setHours(23, 59, 59);\r\n    return time;\r\n}\r\n\r\n/** 將傳入的 Event Array 用 Empty Event 填滿空白的時間段 */\r\nexport function fillEvents(events, date) {\r\n    var filled = new Array();\r\n    var time = startOfDay(date);\r\n    events.map(event => {\r\n        var startTime = new Date(event.startTime);\r\n        var endTime = new Date(event.endTime);\r\n        if (startTime.getHours() > endTime.getHours()) {\r\n            endTime.setHours(23, 59, 59);\r\n        }\r\n        filled.push(new Event({ startTime: time, endTime: startTime }, true));\r\n        filled.push(event);\r\n        time.setTime(endTime.getTime());\r\n    });\r\n    filled.push(new Event({ startTime: time, endTime: endOfDay(date) }, true));\r\n    return filled;\r\n}\r\n\r\nexport function buildRepeatToEvent(userdata, date) {\r\n    var newdata = new User(userdata);\r\n    newdata.calendars.map(calendar => {\r\n        calendar.repeats.map(repeat => {\r\n            repeat = new Repeat(repeat);\r\n            if (date - repeat.startDate > 0 && repeat.endDate - date > 0) {\r\n                if (\r\n                    repeat.cycle == \"Week\" &&\r\n                    date.getDay() == repeat.repeatData &&\r\n                    !repeat.generated.includes(date.getFullYear() + \"/\" + date.getMonth() + \"/\" + date.getDate())\r\n                ) {\r\n                    repeat.generated.push(date.getFullYear() + \"/\" + date.getMonth() + \"/\" + date.getDate());\r\n                    var startTime = new Date(date);\r\n                    var endTime = new Date(date);\r\n                    startTime.setHours(repeat.startTime.getHours(), repeat.startTime.getMinutes());\r\n                    endTime.setHours(repeat.endTime.getHours(), repeat.endTime.getMinutes());\r\n                    calendar.events.push(new Event({ title: repeat.name, color: calendar.color, startTime: startTime, endTime: endTime }));\r\n                } else if (\r\n                    repeat.cycle == \"Month\" &&\r\n                    date.getDate() == repeat.repeatData &&\r\n                    !repeat.generated.includes(date.getFullYear() + \"/\" + date.getMonth() + \"/\" + date.getDate())\r\n                ) {\r\n                    repeat.generated.push(date.getFullYear() + \"/\" + date.getMonth() + \"/\" + date.getDate());\r\n                    var startTime = new Date(date);\r\n                    var endTime = new Date(date);\r\n                    startTime.setHours(repeat.startTime.getHours(), repeat.startTime.getMinutes());\r\n                    endTime.setHours(repeat.endTime.getHours(), repeat.endTime.getMinutes());\r\n                    calendar.events.push(new Event({ title: repeat.name, color: calendar.color, startTime: startTime, endTime: endTime }));\r\n                }\r\n            }\r\n        });\r\n    });\r\n    return newdata;\r\n}\r\n\r\n/** 從傳入的 Calendar Array 過濾出特定日期的 Event */\r\nexport function eventsToDispay(calendars, date) {\r\n    var eventsToDispay = [];\r\n    calendars.map(calendar => {\r\n        calendar = new Calendar(calendar);\r\n        calendar.events.map(event => {\r\n            if (\r\n                event.startTime.getFullYear() == date.getFullYear() &&\r\n                event.startTime.getMonth() == date.getMonth() &&\r\n                event.startTime.getDate() == date.getDate() &&\r\n                !event.isAllDayEvent()\r\n            ) {\r\n                eventsToDispay.push(event);\r\n            }\r\n        });\r\n    });\r\n    eventsToDispay.sort((a, b) => a.startTime - b.startTime);\r\n    return eventsToDispay;\r\n}\r\n\r\n/** 從傳入的 Calendar Array 過濾出特定日期的 All Day Event (全天事件) */\r\nexport function allDayEventsToDispay(calendars, date) {\r\n    var allDayEventsToDispay = [];\r\n    calendars.map(calendar => {\r\n        calendar = new Calendar(calendar);\r\n        calendar.events.map(event => {\r\n            if (\r\n                event.startTime.getFullYear() == date.getFullYear() &&\r\n                event.startTime.getMonth() == date.getMonth() &&\r\n                event.startTime.getDate() == date.getDate() &&\r\n                event.isAllDayEvent()\r\n            ) {\r\n                allDayEventsToDispay.push(event);\r\n            }\r\n        });\r\n    });\r\n    return allDayEventsToDispay;\r\n}\r\n","module.exports = require(\"isomorphic-unfetch\");","module.exports = require(\"react\");","module.exports = require(\"react-day-picker\");","module.exports = require(\"react-helmet\");","module.exports = require(\"react-transition-group\");","module.exports = require(\"rsuite\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtCA;AAwCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAdA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;;;;;;;;;;;;;;;;;;ACxEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AANA;AACA;AAOA;;;;;;;;;;;;;;;;;;;ACXA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAnEA;AACA;AAoEA;;;;;;;;;;;;;;;;;;;ACzvFA;AACA;AAwFA;;;;;;;;;;;;;;;;;;;;;;;;AC7FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAMA;AACA;AACA;AANA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AA7BA;AACA;AA8BA;;;;;;;;;;;;;;;;;;;ACpgFA;;;;;;;;;;;;;;;;;;;;ACplJA;AACA;AAmJA;;;;;;;;;;;;ACzJA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAJA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAVA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAHA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AALA;AAFA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AARA;AAHA;AAcA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAKA;AAKA;AACA;AACA;AAKA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AADA;AAeaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAHA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AArbA;AACA;AAsbA;;;;;;;;;;;;;;;;;;;;;;;AC3cA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AAIA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACzJA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}